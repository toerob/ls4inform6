/*
 * generated by Xtext 2.24.0
 */
package com.github.toerob.serializer;

import com.github.toerob.services.Inform6GrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class Inform6SyntacticSequencer extends AbstractSyntacticSequencer {

	protected Inform6GrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArrayDeclaration_STATICTerminalRuleCall_2_q;
	protected AbstractElementAlias match_Attribute_TildeKeyword_1_q;
	protected AbstractElementAlias match_ClassDeclaration_CommaKeyword_5_0_q;
	protected AbstractElementAlias match_Directive_AbbreviateDirectiveParserRuleCall_20_1_or_AbortDirectiveParserRuleCall_21_1_or_EndDirectiveParserRuleCall_22_1_or_FakeActionDirectiveParserRuleCall_25_1_or_LowStringDirectiveParserRuleCall_23_1_or_PreprocessorDirectiveParserRuleCall_24_1_or_SystemFileDirectiveParserRuleCall_26_1;
	protected AbstractElementAlias match_GlobalConstantDeclaration_EqualsSignKeyword_2_q;
	protected AbstractElementAlias match_GlobalDefaultDeclaration_EqualsSignKeyword_2_q;
	protected AbstractElementAlias match_IdlessObjectDeclaration_CommaKeyword_6_0_q;
	protected AbstractElementAlias match_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1;
	protected AbstractElementAlias match_NearbyDeclaration_CommaKeyword_6_0_q;
	protected AbstractElementAlias match_ObjectDeclaration_CommaKeyword_0_7_0_q;
	protected AbstractElementAlias match_PropertySection_CommaKeyword_1_q;
	protected AbstractElementAlias match_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q;
	protected AbstractElementAlias match_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p;
	protected AbstractElementAlias match_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (Inform6GrammarAccess) access;
		match_ArrayDeclaration_STATICTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getArrayDeclarationAccess().getSTATICTerminalRuleCall_2());
		match_Attribute_TildeKeyword_1_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getTildeKeyword_1());
		match_ClassDeclaration_CommaKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getClassDeclarationAccess().getCommaKeyword_5_0());
		match_Directive_AbbreviateDirectiveParserRuleCall_20_1_or_AbortDirectiveParserRuleCall_21_1_or_EndDirectiveParserRuleCall_22_1_or_FakeActionDirectiveParserRuleCall_25_1_or_LowStringDirectiveParserRuleCall_23_1_or_PreprocessorDirectiveParserRuleCall_24_1_or_SystemFileDirectiveParserRuleCall_26_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getAbbreviateDirectiveParserRuleCall_20_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getAbortDirectiveParserRuleCall_21_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getEndDirectiveParserRuleCall_22_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getFakeActionDirectiveParserRuleCall_25_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getLowStringDirectiveParserRuleCall_23_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getPreprocessorDirectiveParserRuleCall_24_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getSystemFileDirectiveParserRuleCall_26_1()));
		match_GlobalConstantDeclaration_EqualsSignKeyword_2_q = new TokenAlias(false, true, grammarAccess.getGlobalConstantDeclarationAccess().getEqualsSignKeyword_2());
		match_GlobalDefaultDeclaration_EqualsSignKeyword_2_q = new TokenAlias(false, true, grammarAccess.getGlobalDefaultDeclarationAccess().getEqualsSignKeyword_2());
		match_IdlessObjectDeclaration_CommaKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getIdlessObjectDeclarationAccess().getCommaKeyword_6_0());
		match_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getIncludeDeclarationAccess().getLinkKeyword_0_1()));
		match_NearbyDeclaration_CommaKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getNearbyDeclarationAccess().getCommaKeyword_6_0());
		match_ObjectDeclaration_CommaKeyword_0_7_0_q = new TokenAlias(false, true, grammarAccess.getObjectDeclarationAccess().getCommaKeyword_0_7_0());
		match_PropertySection_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getPropertySectionAccess().getCommaKeyword_1());
		match_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getIDTerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getEqualsSignKeyword_1_1()));
		match_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getSolidusKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getSTRINGTerminalRuleCall_2_2_1()));
		match_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbDeclarationAccess().getFirstKeyword_1_4_0()), new TokenAlias(false, false, grammarAccess.getVerbDeclarationAccess().getLastKeyword_1_4_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAbbreviateDirectiveRule())
			return getAbbreviateDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getAbortDirectiveRule())
			return getAbortDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBYTE_ARROWRule())
			return getBYTE_ARROWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEndDirectiveRule())
			return getEndDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFakeActionDirectiveRule())
			return getFakeActionDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLowStringDirectiveRule())
			return getLowStringDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPreprocessorDirectiveRule())
			return getPreprocessorDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSL_COMMENTRule())
			return getSL_COMMENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTATICRule())
			return getSTATICToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSystemFileDirectiveRule())
			return getSystemFileDirectiveToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AbbreviateDirective:
	 * 	'Abbreviate' STRING ';'
	 * ;
	 */
	protected String getAbbreviateDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Abbreviate \"\" ;";
	}
	
	/**
	 * AbortDirective:
	 * 	'abort' ';'
	 * ;
	 */
	protected String getAbortDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "abort ;";
	}
	
	/**
	 * terminal BYTE_ARROW: '->';
	 */
	protected String getBYTE_ARROWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	/**
	 * EndDirective:
	 * 	"End" ';'
	 * ;
	 */
	protected String getEndDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "End ;";
	}
	
	/**
	 * FakeActionDirective:
	 * 	'Fake_Action' ID ';'
	 * ;
	 */
	protected String getFakeActionDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Fake_Action ;";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * LowStringDirective:
	 * 	"Lowstring" ID STRING ";"
	 * ;
	 */
	protected String getLowStringDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Lowstring \"\" ;";
	}
	
	/**
	 * PreprocessorDirective:
	 * 	ANY_PREPROCESSORDIR
	 * ;
	 */
	protected String getPreprocessorDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#;";
	}
	
	/**
	 * @Override 
	 * terminal SL_COMMENT: '!' !('\n'|'\r')* ('\r'? '\n')?;
	 */
	protected String getSL_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * terminal ^STATIC:
	 * 	'static'
	 * ;
	 */
	protected String getSTATICToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "static";
	}
	
	/**
	 * @Override 
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * SystemFileDirective:
	 * 	'System_file' ';'
	 * ;
	 */
	protected String getSystemFileDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "System_file ;";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArrayDeclaration_STATICTerminalRuleCall_2_q.equals(syntax))
				emit_ArrayDeclaration_STATICTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Attribute_TildeKeyword_1_q.equals(syntax))
				emit_Attribute_TildeKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassDeclaration_CommaKeyword_5_0_q.equals(syntax))
				emit_ClassDeclaration_CommaKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Directive_AbbreviateDirectiveParserRuleCall_20_1_or_AbortDirectiveParserRuleCall_21_1_or_EndDirectiveParserRuleCall_22_1_or_FakeActionDirectiveParserRuleCall_25_1_or_LowStringDirectiveParserRuleCall_23_1_or_PreprocessorDirectiveParserRuleCall_24_1_or_SystemFileDirectiveParserRuleCall_26_1.equals(syntax))
				emit_Directive_AbbreviateDirectiveParserRuleCall_20_1_or_AbortDirectiveParserRuleCall_21_1_or_EndDirectiveParserRuleCall_22_1_or_FakeActionDirectiveParserRuleCall_25_1_or_LowStringDirectiveParserRuleCall_23_1_or_PreprocessorDirectiveParserRuleCall_24_1_or_SystemFileDirectiveParserRuleCall_26_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GlobalConstantDeclaration_EqualsSignKeyword_2_q.equals(syntax))
				emit_GlobalConstantDeclaration_EqualsSignKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GlobalDefaultDeclaration_EqualsSignKeyword_2_q.equals(syntax))
				emit_GlobalDefaultDeclaration_EqualsSignKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IdlessObjectDeclaration_CommaKeyword_6_0_q.equals(syntax))
				emit_IdlessObjectDeclaration_CommaKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1.equals(syntax))
				emit_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NearbyDeclaration_CommaKeyword_6_0_q.equals(syntax))
				emit_NearbyDeclaration_CommaKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDeclaration_CommaKeyword_0_7_0_q.equals(syntax))
				emit_ObjectDeclaration_CommaKeyword_0_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PropertySection_CommaKeyword_1_q.equals(syntax))
				emit_PropertySection_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q.equals(syntax))
				emit_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p.equals(syntax))
				emit_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q.equals(syntax))
				emit_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     STATIC?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='buffer' (ambiguity) arrayBody=ArrayType
	 *     name=ID (ambiguity) arrayBody=ArrayType
	 */
	protected void emit_ArrayDeclaration_STATICTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '~'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=[AttributeDeclaration|ID]
	 *     (rule start) (ambiguity) name=[AttributeDeclaration|STATIC]
	 */
	protected void emit_Attribute_TildeKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     max=Primary ')' (ambiguity) properties+=AttributeSection
	 *     max=Primary ')' (ambiguity) properties+=ClassSection
	 *     max=Primary ')' (ambiguity) properties+=PropertySection
	 *     name=ID (ambiguity) properties+=AttributeSection
	 *     name=ID (ambiguity) properties+=ClassSection
	 *     name=ID (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 */
	protected void emit_ClassDeclaration_CommaKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         AbbreviateDirective | 
	  *         AbortDirective | 
	  *         EndDirective | 
	  *         LowStringDirective | 
	  *         PreprocessorDirective | 
	  *         FakeActionDirective | 
	  *         SystemFileDirective
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Directive_AbbreviateDirectiveParserRuleCall_20_1_or_AbortDirectiveParserRuleCall_21_1_or_EndDirectiveParserRuleCall_22_1_or_FakeActionDirectiveParserRuleCall_25_1_or_LowStringDirectiveParserRuleCall_23_1_or_PreprocessorDirectiveParserRuleCall_24_1_or_SystemFileDirectiveParserRuleCall_26_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) value=GlobalConstantValue
	 */
	protected void emit_GlobalConstantDeclaration_EqualsSignKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) value=GlobalConstantValue
	 */
	protected void emit_GlobalDefaultDeclaration_EqualsSignKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=PropertySection
	 *     level+=BYTE_ARROW (ambiguity) properties+=AttributeSection
	 *     level+=BYTE_ARROW (ambiguity) properties+=ClassSection
	 *     level+=BYTE_ARROW (ambiguity) properties+=PropertySection
	 *     name=STRING (ambiguity) properties+=AttributeSection
	 *     name=STRING (ambiguity) properties+=ClassSection
	 *     name=STRING (ambiguity) properties+=PropertySection
	 *     object='Object' (ambiguity) properties+=AttributeSection
	 *     object='Object' (ambiguity) properties+=ClassSection
	 *     object='Object' (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 *     superType=[ClassDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     superType=[ClassDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     superType=[ClassDeclaration|ID] (ambiguity) properties+=PropertySection
	 */
	protected void emit_IdlessObjectDeclaration_CommaKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Include' | 'Link'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) importURI=STRING
	 */
	protected void emit_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     headline=STRING (ambiguity) properties+=AttributeSection
	 *     headline=STRING (ambiguity) properties+=ClassSection
	 *     headline=STRING (ambiguity) properties+=PropertySection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 */
	protected void emit_NearbyDeclaration_CommaKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     headline=STRING (ambiguity) properties+=AttributeSection
	 *     headline=STRING (ambiguity) properties+=ClassSection
	 *     headline=STRING (ambiguity) properties+=PropertySection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=PropertySection
	 *     name=ID (ambiguity) properties+=AttributeSection
	 *     name=ID (ambiguity) properties+=ClassSection
	 *     name=ID (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 */
	protected void emit_ObjectDeclaration_CommaKeyword_0_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) PreprocessorDirective (ambiguity) (rule start)
	 *     name='private' (ambiguity) (rule end)
	 *     name='with' (ambiguity) (rule end)
	 *     properties+=Property (ambiguity) (rule end)
	 */
	protected void emit_PropertySection_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ID '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) binary=BINARY
	 *     (rule start) (ambiguity) direction=DIRECTIONS
	 *     (rule start) (ambiguity) hex=HEX
	 *     (rule start) (ambiguity) id=ID
	 *     (rule start) (ambiguity) number=Number
	 *     (rule start) (ambiguity) string=STRING
	 */
	protected void emit_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('/' STRING)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) STRING (ambiguity) (rule start)
	 */
	protected void emit_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('first' | 'last')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='Extend' (ambiguity) ';' (rule end)
	 *     name='Extend' (ambiguity) defintions+=VerbBody
	 *     only='only' (ambiguity) ';' (rule end)
	 *     only='only' (ambiguity) defintions+=VerbBody
	 *     syn+=STRING (ambiguity) ';' (rule end)
	 *     syn+=STRING (ambiguity) defintions+=VerbBody
	 */
	protected void emit_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
