/*
 * generated by Xtext 2.22.0
 */
package com.github.toerob.serializer;

import com.github.toerob.services.Inform6GrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class Inform6SyntacticSequencer extends AbstractSyntacticSequencer {

	protected Inform6GrammarAccess grammarAccess;
	protected AbstractElementAlias match_AnyToken_ANY_OTHERTerminalRuleCall_1_1_or_BINARYTerminalRuleCall_1_13_or_BYTE_ARROWTerminalRuleCall_1_9_or_DIRECTIONSTerminalRuleCall_1_11_or_HEXTerminalRuleCall_1_12_or_IDTerminalRuleCall_1_4_or_INTTerminalRuleCall_1_3_or_ML_COMMENTTerminalRuleCall_1_5_or_PREPROCESSORDIRTerminalRuleCall_1_8_or_SL_COMMENTTerminalRuleCall_1_6_or_STRINGTerminalRuleCall_1_2_or_WORD_ARROWTerminalRuleCall_1_10_or_WSTerminalRuleCall_1_7;
	protected AbstractElementAlias match_Attribute_TildeKeyword_1_q;
	protected AbstractElementAlias match_ClassDeclaration_ClassKeyword_1_0_or_ClassKeyword_1_1;
	protected AbstractElementAlias match_ClassDeclaration_CommaKeyword_5_0_q;
	protected AbstractElementAlias match_Directive_EndDirectiveParserRuleCall_20_1_or_FakeActionDirectiveParserRuleCall_23_1_or_LowStringDirectiveParserRuleCall_21_1_or_PREPROCESSORDIRTerminalRuleCall_22_1_or_SystemFileDirectiveParserRuleCall_24_1;
	protected AbstractElementAlias match_Expression_SemicolonKeyword_1_q;
	protected AbstractElementAlias match_GlobalConstantDeclaration_EqualsSignKeyword_2_q;
	protected AbstractElementAlias match_GlobalDefaultDeclaration_EqualsSignKeyword_2_q;
	protected AbstractElementAlias match_IdlessObjectDeclaration_CommaKeyword_6_0_q;
	protected AbstractElementAlias match_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1;
	protected AbstractElementAlias match_NearbyDeclaration_CommaKeyword_6_0_q;
	protected AbstractElementAlias match_ObjectDeclaration_CommaKeyword_0_7_0_q;
	protected AbstractElementAlias match_PrimaryExpression_AsteriskKeyword_0_1_1_or_HyphenMinusKeyword_0_1_3_or_PlusSignKeyword_0_1_2_or_SolidusKeyword_0_1_0;
	protected AbstractElementAlias match_PrimaryExpression___LeftParenthesisKeyword_2_1_0_RightParenthesisKeyword_2_1_2__q;
	protected AbstractElementAlias match_Primary_FalseKeyword_8_1_or_SelfKeyword_6_1_or_TrueKeyword_7_1;
	protected AbstractElementAlias match_PropertySection_CommaKeyword_1_q;
	protected AbstractElementAlias match_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q;
	protected AbstractElementAlias match_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p;
	protected AbstractElementAlias match_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (Inform6GrammarAccess) access;
		match_AnyToken_ANY_OTHERTerminalRuleCall_1_1_or_BINARYTerminalRuleCall_1_13_or_BYTE_ARROWTerminalRuleCall_1_9_or_DIRECTIONSTerminalRuleCall_1_11_or_HEXTerminalRuleCall_1_12_or_IDTerminalRuleCall_1_4_or_INTTerminalRuleCall_1_3_or_ML_COMMENTTerminalRuleCall_1_5_or_PREPROCESSORDIRTerminalRuleCall_1_8_or_SL_COMMENTTerminalRuleCall_1_6_or_STRINGTerminalRuleCall_1_2_or_WORD_ARROWTerminalRuleCall_1_10_or_WSTerminalRuleCall_1_7 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getANY_OTHERTerminalRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getBINARYTerminalRuleCall_1_13()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getBYTE_ARROWTerminalRuleCall_1_9()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getDIRECTIONSTerminalRuleCall_1_11()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getHEXTerminalRuleCall_1_12()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getIDTerminalRuleCall_1_4()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getINTTerminalRuleCall_1_3()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getML_COMMENTTerminalRuleCall_1_5()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getPREPROCESSORDIRTerminalRuleCall_1_8()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getSL_COMMENTTerminalRuleCall_1_6()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getSTRINGTerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getWORD_ARROWTerminalRuleCall_1_10()), new TokenAlias(false, false, grammarAccess.getAnyTokenAccess().getWSTerminalRuleCall_1_7()));
		match_Attribute_TildeKeyword_1_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getTildeKeyword_1());
		match_ClassDeclaration_ClassKeyword_1_0_or_ClassKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getClassKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getClassKeyword_1_1()));
		match_ClassDeclaration_CommaKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getClassDeclarationAccess().getCommaKeyword_5_0());
		match_Directive_EndDirectiveParserRuleCall_20_1_or_FakeActionDirectiveParserRuleCall_23_1_or_LowStringDirectiveParserRuleCall_21_1_or_PREPROCESSORDIRTerminalRuleCall_22_1_or_SystemFileDirectiveParserRuleCall_24_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getEndDirectiveParserRuleCall_20_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getFakeActionDirectiveParserRuleCall_23_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getLowStringDirectiveParserRuleCall_21_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getPREPROCESSORDIRTerminalRuleCall_22_1()), new TokenAlias(false, false, grammarAccess.getDirectiveAccess().getSystemFileDirectiveParserRuleCall_24_1()));
		match_Expression_SemicolonKeyword_1_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getSemicolonKeyword_1());
		match_GlobalConstantDeclaration_EqualsSignKeyword_2_q = new TokenAlias(false, true, grammarAccess.getGlobalConstantDeclarationAccess().getEqualsSignKeyword_2());
		match_GlobalDefaultDeclaration_EqualsSignKeyword_2_q = new TokenAlias(false, true, grammarAccess.getGlobalDefaultDeclarationAccess().getEqualsSignKeyword_2());
		match_IdlessObjectDeclaration_CommaKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getIdlessObjectDeclarationAccess().getCommaKeyword_6_0());
		match_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getIncludeDeclarationAccess().getLinkKeyword_0_1()));
		match_NearbyDeclaration_CommaKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getNearbyDeclarationAccess().getCommaKeyword_6_0());
		match_ObjectDeclaration_CommaKeyword_0_7_0_q = new TokenAlias(false, true, grammarAccess.getObjectDeclarationAccess().getCommaKeyword_0_7_0());
		match_PrimaryExpression_AsteriskKeyword_0_1_1_or_HyphenMinusKeyword_0_1_3_or_PlusSignKeyword_0_1_2_or_SolidusKeyword_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getAsteriskKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getHyphenMinusKeyword_0_1_3()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getPlusSignKeyword_0_1_2()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getSolidusKeyword_0_1_0()));
		match_PrimaryExpression___LeftParenthesisKeyword_2_1_0_RightParenthesisKeyword_2_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_1_2()));
		match_Primary_FalseKeyword_8_1_or_SelfKeyword_6_1_or_TrueKeyword_7_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getFalseKeyword_8_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getSelfKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getTrueKeyword_7_1()));
		match_PropertySection_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getPropertySectionAccess().getCommaKeyword_1());
		match_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getIDTerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getEqualsSignKeyword_1_1()));
		match_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getSolidusKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getVerbAssignmentAccess().getSTRINGTerminalRuleCall_2_2_1()));
		match_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getVerbDeclarationAccess().getFirstKeyword_1_4_0()), new TokenAlias(false, false, grammarAccess.getVerbDeclarationAccess().getLastKeyword_1_4_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getANY_OTHERRule())
			return getANY_OTHERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBINARYRule())
			return getBINARYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBYTE_ARROWRule())
			return getBYTE_ARROWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDIRECTIONSRule())
			return getDIRECTIONSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEndDirectiveRule())
			return getEndDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFakeActionDirectiveRule())
			return getFakeActionDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getHEXRule())
			return getHEXToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLowStringDirectiveRule())
			return getLowStringDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getML_COMMENTRule())
			return getML_COMMENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPREPROCESSORDIRRule())
			return getPREPROCESSORDIRToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSL_COMMENTRule())
			return getSL_COMMENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSystemFileDirectiveRule())
			return getSystemFileDirectiveToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWORD_ARROWRule())
			return getWORD_ARROWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ANY_OTHER: .;
	 */
	protected String getANY_OTHERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal BINARY:
	 * 	'$' '$' ('0'|'1')*;
	 */
	protected String getBINARYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "$$";
	}
	
	/**
	 * terminal BYTE_ARROW: '->';
	 */
	protected String getBYTE_ARROWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	/**
	 * terminal DIRECTIONS:
	 * 	'e_to'|'w_to'|'n_to'|'s_to'|'u_to'|'d_to'|'se_to'|'sw_to'|'nw_to'|'ne_to'|'in_to'|'out_to'
	 * ;
	 */
	protected String getDIRECTIONSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "e_to";
	}
	
	/**
	 * EndDirective:
	 * 	"End" ';'
	 * ;
	 */
	protected String getEndDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "End ;";
	}
	
	/**
	 * FakeActionDirective:
	 * 	'Fake_Action' ID ';'
	 * ;
	 */
	protected String getFakeActionDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Fake_Action ;";
	}
	
	/**
	 * terminal HEX:
	 * 	'$'  ('0'..'9'|'a'..'f'|'A'..'F')*;
	 */
	protected String getHEXToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "$";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * @Override	
	 * terminal INT returns ecore::EInt:
	 * 	('0'..'9')* ('.' ('0'..'9')+)?;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * LowStringDirective:
	 * 	"Lowstring" ID STRING ";"
	 * ;
	 */
	protected String getLowStringDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Lowstring \"\" ;";
	}
	
	/**
	 * terminal ML_COMMENT : '/*' -> '*&#47;';
	 */
	protected String getML_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/*";
	}
	
	/**
	 * terminal PREPROCESSORDIR :
	 * 		'#'
	 * 		(
	 * 			 
	 * 			ID 		)
	 * 		!(';')* ';';
	 */
	protected String getPREPROCESSORDIRToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#;";
	}
	
	/**
	 * @Override 
	 * terminal SL_COMMENT: '!' !('\n'|'\r')* ('\r'? '\n')?;
	 */
	protected String getSL_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * @Override 
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * SystemFileDirective:
	 * 	'System_file' ';'
	 * ;
	 */
	protected String getSystemFileDirectiveToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "System_file ;";
	}
	
	/**
	 * terminal WORD_ARROW: '-->';
	 */
	protected String getWORD_ARROWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-->";
	}
	
	/**
	 * terminal WS         : (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AnyToken_ANY_OTHERTerminalRuleCall_1_1_or_BINARYTerminalRuleCall_1_13_or_BYTE_ARROWTerminalRuleCall_1_9_or_DIRECTIONSTerminalRuleCall_1_11_or_HEXTerminalRuleCall_1_12_or_IDTerminalRuleCall_1_4_or_INTTerminalRuleCall_1_3_or_ML_COMMENTTerminalRuleCall_1_5_or_PREPROCESSORDIRTerminalRuleCall_1_8_or_SL_COMMENTTerminalRuleCall_1_6_or_STRINGTerminalRuleCall_1_2_or_WORD_ARROWTerminalRuleCall_1_10_or_WSTerminalRuleCall_1_7.equals(syntax))
				emit_AnyToken_ANY_OTHERTerminalRuleCall_1_1_or_BINARYTerminalRuleCall_1_13_or_BYTE_ARROWTerminalRuleCall_1_9_or_DIRECTIONSTerminalRuleCall_1_11_or_HEXTerminalRuleCall_1_12_or_IDTerminalRuleCall_1_4_or_INTTerminalRuleCall_1_3_or_ML_COMMENTTerminalRuleCall_1_5_or_PREPROCESSORDIRTerminalRuleCall_1_8_or_SL_COMMENTTerminalRuleCall_1_6_or_STRINGTerminalRuleCall_1_2_or_WORD_ARROWTerminalRuleCall_1_10_or_WSTerminalRuleCall_1_7(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Attribute_TildeKeyword_1_q.equals(syntax))
				emit_Attribute_TildeKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassDeclaration_ClassKeyword_1_0_or_ClassKeyword_1_1.equals(syntax))
				emit_ClassDeclaration_ClassKeyword_1_0_or_ClassKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ClassDeclaration_CommaKeyword_5_0_q.equals(syntax))
				emit_ClassDeclaration_CommaKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Directive_EndDirectiveParserRuleCall_20_1_or_FakeActionDirectiveParserRuleCall_23_1_or_LowStringDirectiveParserRuleCall_21_1_or_PREPROCESSORDIRTerminalRuleCall_22_1_or_SystemFileDirectiveParserRuleCall_24_1.equals(syntax))
				emit_Directive_EndDirectiveParserRuleCall_20_1_or_FakeActionDirectiveParserRuleCall_23_1_or_LowStringDirectiveParserRuleCall_21_1_or_PREPROCESSORDIRTerminalRuleCall_22_1_or_SystemFileDirectiveParserRuleCall_24_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_SemicolonKeyword_1_q.equals(syntax))
				emit_Expression_SemicolonKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GlobalConstantDeclaration_EqualsSignKeyword_2_q.equals(syntax))
				emit_GlobalConstantDeclaration_EqualsSignKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GlobalDefaultDeclaration_EqualsSignKeyword_2_q.equals(syntax))
				emit_GlobalDefaultDeclaration_EqualsSignKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IdlessObjectDeclaration_CommaKeyword_6_0_q.equals(syntax))
				emit_IdlessObjectDeclaration_CommaKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1.equals(syntax))
				emit_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NearbyDeclaration_CommaKeyword_6_0_q.equals(syntax))
				emit_NearbyDeclaration_CommaKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDeclaration_CommaKeyword_0_7_0_q.equals(syntax))
				emit_ObjectDeclaration_CommaKeyword_0_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_AsteriskKeyword_0_1_1_or_HyphenMinusKeyword_0_1_3_or_PlusSignKeyword_0_1_2_or_SolidusKeyword_0_1_0.equals(syntax))
				emit_PrimaryExpression_AsteriskKeyword_0_1_1_or_HyphenMinusKeyword_0_1_3_or_PlusSignKeyword_0_1_2_or_SolidusKeyword_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression___LeftParenthesisKeyword_2_1_0_RightParenthesisKeyword_2_1_2__q.equals(syntax))
				emit_PrimaryExpression___LeftParenthesisKeyword_2_1_0_RightParenthesisKeyword_2_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_FalseKeyword_8_1_or_SelfKeyword_6_1_or_TrueKeyword_7_1.equals(syntax))
				emit_Primary_FalseKeyword_8_1_or_SelfKeyword_6_1_or_TrueKeyword_7_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PropertySection_CommaKeyword_1_q.equals(syntax))
				emit_PropertySection_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q.equals(syntax))
				emit_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p.equals(syntax))
				emit_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q.equals(syntax))
				emit_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         ANY_OTHER | 
	  *         STRING | 
	  *         INT | 
	  *         ID | 
	  *         ML_COMMENT | 
	  *         SL_COMMENT | 
	  *         WS | 
	  *         PREPROCESSORDIR | 
	  *         BYTE_ARROW | 
	  *         WORD_ARROW | 
	  *         DIRECTIONS | 
	  *         HEX | 
	  *         BINARY
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_AnyToken_ANY_OTHERTerminalRuleCall_1_1_or_BINARYTerminalRuleCall_1_13_or_BYTE_ARROWTerminalRuleCall_1_9_or_DIRECTIONSTerminalRuleCall_1_11_or_HEXTerminalRuleCall_1_12_or_IDTerminalRuleCall_1_4_or_INTTerminalRuleCall_1_3_or_ML_COMMENTTerminalRuleCall_1_5_or_PREPROCESSORDIRTerminalRuleCall_1_8_or_SL_COMMENTTerminalRuleCall_1_6_or_STRINGTerminalRuleCall_1_2_or_WORD_ARROWTerminalRuleCall_1_10_or_WSTerminalRuleCall_1_7(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '~'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=[AttributeDeclaration|ID]
	 */
	protected void emit_Attribute_TildeKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Class' | 'class'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_ClassDeclaration_ClassKeyword_1_0_or_ClassKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     max=Primary ')' (ambiguity) properties+=AttributeSection
	 *     max=Primary ')' (ambiguity) properties+=ClassSection
	 *     max=Primary ')' (ambiguity) properties+=PropertySection
	 *     name=ID (ambiguity) properties+=AttributeSection
	 *     name=ID (ambiguity) properties+=ClassSection
	 *     name=ID (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 */
	protected void emit_ClassDeclaration_CommaKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EndDirective | LowStringDirective | PREPROCESSORDIR | FakeActionDirective | SystemFileDirective
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Directive_EndDirectiveParserRuleCall_20_1_or_FakeActionDirectiveParserRuleCall_23_1_or_LowStringDirectiveParserRuleCall_21_1_or_PREPROCESSORDIRTerminalRuleCall_22_1_or_SystemFileDirectiveParserRuleCall_24_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     anyToken=AnyToken (ambiguity) (rule end)
	 *     semicolon=';' (ambiguity) (rule end)
	 */
	protected void emit_Expression_SemicolonKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) value=GlobalConstantValue
	 */
	protected void emit_GlobalConstantDeclaration_EqualsSignKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) value=GlobalConstantValue
	 */
	protected void emit_GlobalDefaultDeclaration_EqualsSignKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=PropertySection
	 *     level+=BYTE_ARROW (ambiguity) properties+=AttributeSection
	 *     level+=BYTE_ARROW (ambiguity) properties+=ClassSection
	 *     level+=BYTE_ARROW (ambiguity) properties+=PropertySection
	 *     name=STRING (ambiguity) properties+=AttributeSection
	 *     name=STRING (ambiguity) properties+=ClassSection
	 *     name=STRING (ambiguity) properties+=PropertySection
	 *     object='Object' (ambiguity) properties+=AttributeSection
	 *     object='Object' (ambiguity) properties+=ClassSection
	 *     object='Object' (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 *     superType=[ClassDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     superType=[ClassDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     superType=[ClassDeclaration|ID] (ambiguity) properties+=PropertySection
	 */
	protected void emit_IdlessObjectDeclaration_CommaKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Include' | 'Link'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) importURI=STRING
	 */
	protected void emit_IncludeDeclaration_IncludeKeyword_0_0_or_LinkKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     headline=STRING (ambiguity) properties+=AttributeSection
	 *     headline=STRING (ambiguity) properties+=ClassSection
	 *     headline=STRING (ambiguity) properties+=PropertySection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 */
	protected void emit_NearbyDeclaration_CommaKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     headline=STRING (ambiguity) properties+=AttributeSection
	 *     headline=STRING (ambiguity) properties+=ClassSection
	 *     headline=STRING (ambiguity) properties+=PropertySection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=AttributeSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=ClassSection
	 *     in=[ObjectDeclaration|ID] (ambiguity) properties+=PropertySection
	 *     name=ID (ambiguity) properties+=AttributeSection
	 *     name=ID (ambiguity) properties+=ClassSection
	 *     name=ID (ambiguity) properties+=PropertySection
	 *     properties+=AttributeSection (ambiguity) properties+=AttributeSection
	 *     properties+=AttributeSection (ambiguity) properties+=ClassSection
	 *     properties+=AttributeSection (ambiguity) properties+=PropertySection
	 *     properties+=ClassSection (ambiguity) properties+=AttributeSection
	 *     properties+=ClassSection (ambiguity) properties+=ClassSection
	 *     properties+=ClassSection (ambiguity) properties+=PropertySection
	 *     properties+=PropertySection (ambiguity) properties+=AttributeSection
	 *     properties+=PropertySection (ambiguity) properties+=ClassSection
	 *     properties+=PropertySection (ambiguity) properties+=PropertySection
	 */
	protected void emit_ObjectDeclaration_CommaKeyword_0_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '/' | '*' | '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     left=Primary (ambiguity) right=Primary
	 */
	protected void emit_PrimaryExpression_AsteriskKeyword_0_1_1_or_HyphenMinusKeyword_0_1_3_or_PlusSignKeyword_0_1_2_or_SolidusKeyword_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     left=Primary (ambiguity) (rule end)
	 */
	protected void emit_PrimaryExpression___LeftParenthesisKeyword_2_1_0_RightParenthesisKeyword_2_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'self' | 'true' | 'false'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ID '=')? (ambiguity) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Primary_FalseKeyword_8_1_or_SelfKeyword_6_1_or_TrueKeyword_7_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) PREPROCESSORDIR (ambiguity) (rule start)
	 *     name='private' (ambiguity) (rule end)
	 *     name='with' (ambiguity) (rule end)
	 *     properties+=Property (ambiguity) (rule end)
	 */
	protected void emit_PropertySection_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ID '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('self' | 'true' | 'false') (rule start)
	 *     (rule start) (ambiguity) binary=BINARY
	 *     (rule start) (ambiguity) direction=DIRECTIONS
	 *     (rule start) (ambiguity) hex=HEX
	 *     (rule start) (ambiguity) id=ID
	 *     (rule start) (ambiguity) number=Number
	 *     (rule start) (ambiguity) string=STRING
	 */
	protected void emit_VerbAssignment___IDTerminalRuleCall_1_0_EqualsSignKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('/' STRING)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) STRING (ambiguity) (rule start)
	 */
	protected void emit_VerbAssignment___SolidusKeyword_2_2_0_STRINGTerminalRuleCall_2_2_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('first' | 'last')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='Extend' (ambiguity) ';' (rule end)
	 *     name='Extend' (ambiguity) defintions+=VerbBody
	 *     only='only' (ambiguity) ';' (rule end)
	 *     only='only' (ambiguity) defintions+=VerbBody
	 *     syn+=STRING (ambiguity) ';' (rule end)
	 *     syn+=STRING (ambiguity) defintions+=VerbBody
	 */
	protected void emit_VerbDeclaration___FirstKeyword_1_4_0_or_LastKeyword_1_4_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
