/*
 * generated by Xtext 2.22.0
 */
package com.github.toerob.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Inform6GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDirectivesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDirectivesDirectiveParserRuleCall_0_0 = (RuleCall)cDirectivesAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cImportsIncludeDeclarationParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		
		///*
		//Inform 6 grammar for Xtext lexer and parser generation for use with the 
		//Language Server Protocol (LSP) as a code assister within various of editors
		//
		// 
		//The MIT License (MIT)
		//
		//Copyright (c) 2020 Tomas Ã–berg
		//
		//Permission is hereby granted, free of charge, to any person obtaining a copy
		//of this software and associated documentation files (the "Software"), to deal
		//in the Software without restriction, including without limitation the rights
		//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		//copies of the Software, and to permit persons to whom the Software is
		//furnished to do so, subject to the following conditions:
		//
		//The above copyright notice and this permission notice shall be included in
		//all copies or substantial portions of the Software.
		//
		//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
		//THE SOFTWARE. 
		// */ Program:
		//	(directives+=Directive | imports+=IncludeDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(directives+=Directive | imports+=IncludeDeclaration)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//directives+=Directive
		public Assignment getDirectivesAssignment_0() { return cDirectivesAssignment_0; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_0_0() { return cDirectivesDirectiveParserRuleCall_0_0; }
		
		//imports+=IncludeDeclaration
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//IncludeDeclaration
		public RuleCall getImportsIncludeDeclarationParserRuleCall_1_0() { return cImportsIncludeDeclarationParserRuleCall_1_0; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Directive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReleaseDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cZcharacterDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommentDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReplaceDirectiveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSerialDirectiveParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSwitchesDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGlobalDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGlobalDefaultDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGlobalConstantDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGlobalFunctionDefinitionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAttributeDeclarationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPropertyDeclarationParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cClassDeclarationParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cObjectDeclarationParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cIdlessObjectDeclarationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cNearbyDeclarationParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cVerbDeclarationParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cArrayDeclarationParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cPropertyDirectiveParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cMessageDirectiveParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Action cDirectiveAction_20_0 = (Action)cGroup_20.eContents().get(0);
		private final RuleCall cEndDirectiveParserRuleCall_20_1 = (RuleCall)cGroup_20.eContents().get(1);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Action cDirectiveAction_21_0 = (Action)cGroup_21.eContents().get(0);
		private final RuleCall cLowStringDirectiveParserRuleCall_21_1 = (RuleCall)cGroup_21.eContents().get(1);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Action cDirectiveAction_22_0 = (Action)cGroup_22.eContents().get(0);
		private final RuleCall cPREPROCESSORDIRTerminalRuleCall_22_1 = (RuleCall)cGroup_22.eContents().get(1);
		private final Group cGroup_23 = (Group)cAlternatives.eContents().get(23);
		private final Action cDirectiveAction_23_0 = (Action)cGroup_23.eContents().get(0);
		private final RuleCall cFakeActionDirectiveParserRuleCall_23_1 = (RuleCall)cGroup_23.eContents().get(1);
		private final Group cGroup_24 = (Group)cAlternatives.eContents().get(24);
		private final Action cDirectiveAction_24_0 = (Action)cGroup_24.eContents().get(0);
		private final RuleCall cSystemFileDirectiveParserRuleCall_24_1 = (RuleCall)cGroup_24.eContents().get(1);
		
		////=============================================================
		//// D I R E C T I V E S 
		////=============================================================
		//Directive:
		//	ReleaseDirective
		//	| ZcharacterDirective
		//	| CommentDeclaration
		//	| ReplaceDirective
		//	| SerialDirective
		//	| SwitchesDeclaration
		//	| GlobalDeclaration
		//	| GlobalDefaultDeclaration
		//	| GlobalConstantDeclaration
		//	| GlobalFunctionDefinition
		//	| AttributeDeclaration
		//	| PropertyDeclaration
		//	| ClassDeclaration
		//	| ObjectDeclaration
		//	| IdlessObjectDeclaration
		//	| NearbyDeclaration
		//	| VerbDeclaration
		//	| ArrayDeclaration
		//	| PropertyDirective
		//	| MessageDirective
		//	| {Directive} EndDirective
		//	| {Directive} LowStringDirective
		//	| {Directive} PREPROCESSORDIR
		//	| {Directive} FakeActionDirective
		//	| {Directive} SystemFileDirective;
		@Override public ParserRule getRule() { return rule; }
		
		//ReleaseDirective | ZcharacterDirective | CommentDeclaration | ReplaceDirective | SerialDirective | SwitchesDeclaration |
		//GlobalDeclaration | GlobalDefaultDeclaration | GlobalConstantDeclaration | GlobalFunctionDefinition |
		//AttributeDeclaration | PropertyDeclaration | ClassDeclaration | ObjectDeclaration | IdlessObjectDeclaration |
		//NearbyDeclaration | VerbDeclaration | ArrayDeclaration | PropertyDirective | MessageDirective | {Directive}
		//EndDirective | {Directive} LowStringDirective | {Directive} PREPROCESSORDIR | {Directive} FakeActionDirective |
		//{Directive} SystemFileDirective
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReleaseDirective
		public RuleCall getReleaseDirectiveParserRuleCall_0() { return cReleaseDirectiveParserRuleCall_0; }
		
		//ZcharacterDirective
		public RuleCall getZcharacterDirectiveParserRuleCall_1() { return cZcharacterDirectiveParserRuleCall_1; }
		
		//CommentDeclaration
		public RuleCall getCommentDeclarationParserRuleCall_2() { return cCommentDeclarationParserRuleCall_2; }
		
		//ReplaceDirective
		public RuleCall getReplaceDirectiveParserRuleCall_3() { return cReplaceDirectiveParserRuleCall_3; }
		
		//SerialDirective
		public RuleCall getSerialDirectiveParserRuleCall_4() { return cSerialDirectiveParserRuleCall_4; }
		
		//SwitchesDeclaration
		public RuleCall getSwitchesDeclarationParserRuleCall_5() { return cSwitchesDeclarationParserRuleCall_5; }
		
		//GlobalDeclaration
		public RuleCall getGlobalDeclarationParserRuleCall_6() { return cGlobalDeclarationParserRuleCall_6; }
		
		//GlobalDefaultDeclaration
		public RuleCall getGlobalDefaultDeclarationParserRuleCall_7() { return cGlobalDefaultDeclarationParserRuleCall_7; }
		
		//GlobalConstantDeclaration
		public RuleCall getGlobalConstantDeclarationParserRuleCall_8() { return cGlobalConstantDeclarationParserRuleCall_8; }
		
		//GlobalFunctionDefinition
		public RuleCall getGlobalFunctionDefinitionParserRuleCall_9() { return cGlobalFunctionDefinitionParserRuleCall_9; }
		
		//AttributeDeclaration
		public RuleCall getAttributeDeclarationParserRuleCall_10() { return cAttributeDeclarationParserRuleCall_10; }
		
		//PropertyDeclaration
		public RuleCall getPropertyDeclarationParserRuleCall_11() { return cPropertyDeclarationParserRuleCall_11; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_12() { return cClassDeclarationParserRuleCall_12; }
		
		//ObjectDeclaration
		public RuleCall getObjectDeclarationParserRuleCall_13() { return cObjectDeclarationParserRuleCall_13; }
		
		//IdlessObjectDeclaration
		public RuleCall getIdlessObjectDeclarationParserRuleCall_14() { return cIdlessObjectDeclarationParserRuleCall_14; }
		
		//NearbyDeclaration
		public RuleCall getNearbyDeclarationParserRuleCall_15() { return cNearbyDeclarationParserRuleCall_15; }
		
		//VerbDeclaration
		public RuleCall getVerbDeclarationParserRuleCall_16() { return cVerbDeclarationParserRuleCall_16; }
		
		//ArrayDeclaration
		public RuleCall getArrayDeclarationParserRuleCall_17() { return cArrayDeclarationParserRuleCall_17; }
		
		//PropertyDirective
		public RuleCall getPropertyDirectiveParserRuleCall_18() { return cPropertyDirectiveParserRuleCall_18; }
		
		//MessageDirective
		public RuleCall getMessageDirectiveParserRuleCall_19() { return cMessageDirectiveParserRuleCall_19; }
		
		//{Directive} EndDirective
		public Group getGroup_20() { return cGroup_20; }
		
		//{Directive}
		public Action getDirectiveAction_20_0() { return cDirectiveAction_20_0; }
		
		//EndDirective
		public RuleCall getEndDirectiveParserRuleCall_20_1() { return cEndDirectiveParserRuleCall_20_1; }
		
		//{Directive} LowStringDirective
		public Group getGroup_21() { return cGroup_21; }
		
		//{Directive}
		public Action getDirectiveAction_21_0() { return cDirectiveAction_21_0; }
		
		//LowStringDirective
		public RuleCall getLowStringDirectiveParserRuleCall_21_1() { return cLowStringDirectiveParserRuleCall_21_1; }
		
		//{Directive} PREPROCESSORDIR
		public Group getGroup_22() { return cGroup_22; }
		
		//{Directive}
		public Action getDirectiveAction_22_0() { return cDirectiveAction_22_0; }
		
		//PREPROCESSORDIR
		public RuleCall getPREPROCESSORDIRTerminalRuleCall_22_1() { return cPREPROCESSORDIRTerminalRuleCall_22_1; }
		
		//{Directive} FakeActionDirective
		public Group getGroup_23() { return cGroup_23; }
		
		//{Directive}
		public Action getDirectiveAction_23_0() { return cDirectiveAction_23_0; }
		
		//FakeActionDirective
		public RuleCall getFakeActionDirectiveParserRuleCall_23_1() { return cFakeActionDirectiveParserRuleCall_23_1; }
		
		//{Directive} SystemFileDirective
		public Group getGroup_24() { return cGroup_24; }
		
		//{Directive}
		public Action getDirectiveAction_24_0() { return cDirectiveAction_24_0; }
		
		//SystemFileDirective
		public RuleCall getSystemFileDirectiveParserRuleCall_24_1() { return cSystemFileDirectiveParserRuleCall_24_1; }
	}
	public class SystemFileDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.SystemFileDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystem_fileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SystemFileDirective:
		//	'System_file' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'System_file' ';'
		public Group getGroup() { return cGroup; }
		
		//'System_file'
		public Keyword getSystem_fileKeyword_0() { return cSystem_fileKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class FakeActionDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.FakeActionDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFake_ActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FakeActionDirective:
		//	'Fake_Action' ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Fake_Action' ID ';'
		public Group getGroup() { return cGroup; }
		
		//'Fake_Action'
		public Keyword getFake_ActionKeyword_0() { return cFake_ActionKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MessageDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.MessageDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MessageDirective:
		//	'Message' name=ID? string=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Message' name=ID? string=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'Message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ZcharacterDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ZcharacterDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZcharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ZcharacterDirective:
		//	'Zcharacter' string=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Zcharacter' string=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'Zcharacter'
		public Keyword getZcharacterKeyword_0() { return cZcharacterKeyword_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CommentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.CommentDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompilerDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommentDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CommentDeclaration:
		//	CompilerDirective
		//	| {CommentDeclaration} SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//CompilerDirective | {CommentDeclaration} SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompilerDirective
		public RuleCall getCompilerDirectiveParserRuleCall_0() { return cCompilerDirectiveParserRuleCall_0; }
		
		//{CommentDeclaration} SL_COMMENT
		public Group getGroup_1() { return cGroup_1; }
		
		//{CommentDeclaration}
		public Action getCommentDeclarationAction_1_0() { return cCommentDeclarationAction_1_0; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1_1() { return cSL_COMMENTTerminalRuleCall_1_1; }
	}
	public class CompilerDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.CompilerDirective");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCOMPILER_DIRECTIVE_COMMENTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CompilerDirective:
		//	value=COMPILER_DIRECTIVE_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=COMPILER_DIRECTIVE_COMMENT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//COMPILER_DIRECTIVE_COMMENT
		public RuleCall getValueCOMPILER_DIRECTIVE_COMMENTTerminalRuleCall_0() { return cValueCOMPILER_DIRECTIVE_COMMENTTerminalRuleCall_0; }
	}
	public class IncludeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.IncludeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLinkKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IncludeDeclaration:
		//	('Include' | 'Link') importURI=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('Include' | 'Link') importURI=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//('Include' | 'Link')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Include'
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }
		
		//'Link'
		public Keyword getLinkKeyword_0_1() { return cLinkKeyword_0_1; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class EndDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.EndDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EndDirective:
		//	"End" ';';
		@Override public ParserRule getRule() { return rule; }
		
		//"End" ';'
		public Group getGroup() { return cGroup; }
		
		//"End"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class PropertyDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.PropertyDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdditiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAdditiveAdditiveKeyword_1_0 = (Keyword)cAdditiveAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameDIRECTIONSTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final Keyword cNameFound_inKeyword_2_0_2 = (Keyword)cNameAlternatives_2_0.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////FIXME: DIRECTIONS should be able to cross reference the same way as attributes
		//PropertyDirective:
		//	"Property" additive='additive'? name=(ID | DIRECTIONS | 'found_in') value=ID? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//"Property" additive='additive'? name=(ID | DIRECTIONS | 'found_in') value=ID? ';'
		public Group getGroup() { return cGroup; }
		
		//"Property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//additive='additive'?
		public Assignment getAdditiveAssignment_1() { return cAdditiveAssignment_1; }
		
		//'additive'
		public Keyword getAdditiveAdditiveKeyword_1_0() { return cAdditiveAdditiveKeyword_1_0; }
		
		//name=(ID | DIRECTIONS | 'found_in')
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(ID | DIRECTIONS | 'found_in')
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//DIRECTIONS
		public RuleCall getNameDIRECTIONSTerminalRuleCall_2_0_1() { return cNameDIRECTIONSTerminalRuleCall_2_0_1; }
		
		//'found_in'
		public Keyword getNameFound_inKeyword_2_0_2() { return cNameFound_inKeyword_2_0_2; }
		
		//value=ID?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_3_0() { return cValueIDTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class LowStringDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.LowStringDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLowstringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LowStringDirective:
		//	"Lowstring" ID STRING ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"Lowstring" ID STRING ";"
		public Group getGroup() { return cGroup; }
		
		//"Lowstring"
		public Keyword getLowstringKeyword_0() { return cLowstringKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ReleaseDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ReleaseDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameReleaseKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionINTTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReleaseDirective:
		//	name="Release" version=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name="Release" version=INT ';'
		public Group getGroup() { return cGroup; }
		
		//name="Release"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"Release"
		public Keyword getNameReleaseKeyword_0_0() { return cNameReleaseKeyword_0_0; }
		
		//version=INT
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }
		
		//INT
		public RuleCall getVersionINTTerminalRuleCall_1_0() { return cVersionINTTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ReplaceDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ReplaceDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameReplaceKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReplaceDirective:
		//	name="Replace" id=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name="Replace" id=ID ';'
		public Group getGroup() { return cGroup; }
		
		//name="Replace"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"Replace"
		public Keyword getNameReplaceKeyword_0_0() { return cNameReplaceKeyword_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SerialDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.SerialDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSerialKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cSerialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSerialSTRINGTerminalRuleCall_1_0 = (RuleCall)cSerialAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SerialDirective:
		//	name="Serial" serial=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name="Serial" serial=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//name="Serial"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"Serial"
		public Keyword getNameSerialKeyword_0_0() { return cNameSerialKeyword_0_0; }
		
		//serial=STRING
		public Assignment getSerialAssignment_1() { return cSerialAssignment_1; }
		
		//STRING
		public RuleCall getSerialSTRINGTerminalRuleCall_1_0() { return cSerialSTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class GlobalConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.GlobalConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueGlobalConstantValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GlobalConstantDeclaration:
		//	'Constant' name=ID '='? value=GlobalConstantValue? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Constant' name=ID '='? value=GlobalConstantValue? ';'
		public Group getGroup() { return cGroup; }
		
		//'Constant'
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='?
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=GlobalConstantValue?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//GlobalConstantValue
		public RuleCall getValueGlobalConstantValueParserRuleCall_3_0() { return cValueGlobalConstantValueParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class GlobalDefaultDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.GlobalDefaultDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueGlobalConstantValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GlobalDefaultDeclaration:
		//	'Default' name=ID '='? value=GlobalConstantValue? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Default' name=ID '='? value=GlobalConstantValue? ';'
		public Group getGroup() { return cGroup; }
		
		//'Default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='?
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=GlobalConstantValue?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//GlobalConstantValue
		public RuleCall getValueGlobalConstantValueParserRuleCall_3_0() { return cValueGlobalConstantValueParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SwitchesDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.SwitchesDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSwitchesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cSwitchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSwitchesPrimaryParserRuleCall_1_0 = (RuleCall)cSwitchesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SwitchesDeclaration:
		//	name='Switches' switches+=Primary* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Switches' switches+=Primary* ';'
		public Group getGroup() { return cGroup; }
		
		//name='Switches'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Switches'
		public Keyword getNameSwitchesKeyword_0_0() { return cNameSwitchesKeyword_0_0; }
		
		//switches+=Primary*
		public Assignment getSwitchesAssignment_1() { return cSwitchesAssignment_1; }
		
		//Primary
		public RuleCall getSwitchesPrimaryParserRuleCall_1_0() { return cSwitchesPrimaryParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class GlobalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.GlobalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameMetaKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuePrimaryParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////FIXME:Â 'meta' here should be a global declaration, and instead used as a [GlobalDeclaration]
		//// in the grammar instead of a keyword.
		//GlobalDeclaration:
		//	'Global' name=(ID | 'meta') ('=' value=Primary)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Global' name=(ID | 'meta') ('=' value=Primary)? ';'
		public Group getGroup() { return cGroup; }
		
		//'Global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//name=(ID | 'meta')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | 'meta')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'meta'
		public Keyword getNameMetaKeyword_1_0_1() { return cNameMetaKeyword_1_0_1; }
		
		//('=' value=Primary)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=Primary
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Primary
		public RuleCall getValuePrimaryParserRuleCall_2_1_0() { return cValuePrimaryParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class GlobalConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.GlobalConstantValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimaryParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//GlobalConstantValue:
		//	name=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Primary
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Primary
		public RuleCall getNamePrimaryParserRuleCall_0() { return cNamePrimaryParserRuleCall_0; }
	}
	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.AttributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AttributeDeclaration:
		//	'Attribute' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Attribute' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'Attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePrimaryParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PropertyDeclaration:
		//	'Property' name=ID value=Primary ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Property' name=ID value=Primary ';'
		public Group getGroup() { return cGroup; }
		
		//'Property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=Primary
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Primary
		public RuleCall getValuePrimaryParserRuleCall_2_0() { return cValuePrimaryParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cClassKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCardinalityAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cCardinalityLeftParenthesisKeyword_3_0_0 = (Keyword)cCardinalityAssignment_3_0.eContents().get(0);
		private final Assignment cMaxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxPrimaryParserRuleCall_3_1_0 = (RuleCall)cMaxAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cPropertiesAlternatives_4_0 = (Alternatives)cPropertiesAssignment_4.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_4_0_0 = (RuleCall)cPropertiesAlternatives_4_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_4_0_1 = (RuleCall)cPropertiesAlternatives_4_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_4_0_2 = (RuleCall)cPropertiesAlternatives_4_0.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cPropertiesAlternatives_5_1_0 = (Alternatives)cPropertiesAssignment_5_1.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_5_1_0_0 = (RuleCall)cPropertiesAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_5_1_0_1 = (RuleCall)cPropertiesAlternatives_5_1_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_5_1_0_2 = (RuleCall)cPropertiesAlternatives_5_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ClassDeclaration:
		//	{ClassDeclaration} ('Class' | 'class') name=ID (cardinality='(' max=Primary ')')?
		//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
		//	AttributeSection))*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClassDeclaration} ('Class' | 'class') name=ID (cardinality='(' max=Primary ')')? properties+=(ClassSection |
		//PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection | AttributeSection))* ';'
		public Group getGroup() { return cGroup; }
		
		//{ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }
		
		//('Class' | 'class')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Class'
		public Keyword getClassKeyword_1_0() { return cClassKeyword_1_0; }
		
		//'class'
		public Keyword getClassKeyword_1_1() { return cClassKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(cardinality='(' max=Primary ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//cardinality='('
		public Assignment getCardinalityAssignment_3_0() { return cCardinalityAssignment_3_0; }
		
		//'('
		public Keyword getCardinalityLeftParenthesisKeyword_3_0_0() { return cCardinalityLeftParenthesisKeyword_3_0_0; }
		
		//max=Primary
		public Assignment getMaxAssignment_3_1() { return cMaxAssignment_3_1; }
		
		//Primary
		public RuleCall getMaxPrimaryParserRuleCall_3_1_0() { return cMaxPrimaryParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)?
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_4_0() { return cPropertiesAlternatives_4_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_4_0_0() { return cPropertiesClassSectionParserRuleCall_4_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_4_0_1() { return cPropertiesPropertySectionParserRuleCall_4_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_4_0_2() { return cPropertiesAttributeSectionParserRuleCall_4_0_2; }
		
		//(','? properties+=(ClassSection | PropertySection | AttributeSection))*
		public Group getGroup_5() { return cGroup_5; }
		
		//','?
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_5_1_0() { return cPropertiesAlternatives_5_1_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_5_1_0_0() { return cPropertiesClassSectionParserRuleCall_5_1_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_5_1_0_1() { return cPropertiesPropertySectionParserRuleCall_5_1_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_5_1_0_2() { return cPropertiesAttributeSectionParserRuleCall_5_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ObjectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Action cObjectDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cObjectAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cObjectObjectKeyword_0_1_0_0 = (Keyword)cObjectAssignment_0_1_0.eContents().get(0);
		private final Assignment cSuperTypeAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final CrossReference cSuperTypeClassDeclarationCrossReference_0_1_1_0 = (CrossReference)cSuperTypeAssignment_0_1_1.eContents().get(0);
		private final RuleCall cSuperTypeClassDeclarationIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cSuperTypeClassDeclarationCrossReference_0_1_1_0.eContents().get(1);
		private final Assignment cLevelAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLevelBYTE_ARROWTerminalRuleCall_0_2_0 = (RuleCall)cLevelAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Assignment cHeadlineAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cHeadlineSTRINGTerminalRuleCall_0_4_0 = (RuleCall)cHeadlineAssignment_0_4.eContents().get(0);
		private final Assignment cInAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cInObjectDeclarationCrossReference_0_5_0 = (CrossReference)cInAssignment_0_5.eContents().get(0);
		private final RuleCall cInObjectDeclarationIDTerminalRuleCall_0_5_0_1 = (RuleCall)cInObjectDeclarationCrossReference_0_5_0.eContents().get(1);
		private final Assignment cPropertiesAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final Alternatives cPropertiesAlternatives_0_6_0 = (Alternatives)cPropertiesAssignment_0_6.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_0_6_0_0 = (RuleCall)cPropertiesAlternatives_0_6_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_0_6_0_1 = (RuleCall)cPropertiesAlternatives_0_6_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_0_6_0_2 = (RuleCall)cPropertiesAlternatives_0_6_0.eContents().get(2);
		private final Group cGroup_0_7 = (Group)cGroup_0.eContents().get(7);
		private final Keyword cCommaKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cPropertiesAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final Alternatives cPropertiesAlternatives_0_7_1_0 = (Alternatives)cPropertiesAssignment_0_7_1.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_0_7_1_0_0 = (RuleCall)cPropertiesAlternatives_0_7_1_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_0_7_1_0_1 = (RuleCall)cPropertiesAlternatives_0_7_1_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_0_7_1_0_2 = (RuleCall)cPropertiesAlternatives_0_7_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ObjectDeclaration:
		//	({ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=ID headline=STRING?
		//	in=[ObjectDeclaration]?
		//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
		//	AttributeSection))*)
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//({ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=ID headline=STRING?
		//in=[ObjectDeclaration]? properties+=(ClassSection | PropertySection | AttributeSection)? (','?
		//properties+=(ClassSection | PropertySection | AttributeSection))*) ';'
		public Group getGroup() { return cGroup; }
		
		//({ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=ID headline=STRING?
		//in=[ObjectDeclaration]? properties+=(ClassSection | PropertySection | AttributeSection)? (','?
		//properties+=(ClassSection | PropertySection | AttributeSection))*)
		public Group getGroup_0() { return cGroup_0; }
		
		//{ObjectDeclaration}
		public Action getObjectDeclarationAction_0_0() { return cObjectDeclarationAction_0_0; }
		
		//(object='Object' | superType=[ClassDeclaration])
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//object='Object'
		public Assignment getObjectAssignment_0_1_0() { return cObjectAssignment_0_1_0; }
		
		//'Object'
		public Keyword getObjectObjectKeyword_0_1_0_0() { return cObjectObjectKeyword_0_1_0_0; }
		
		//superType=[ClassDeclaration]
		public Assignment getSuperTypeAssignment_0_1_1() { return cSuperTypeAssignment_0_1_1; }
		
		//[ClassDeclaration]
		public CrossReference getSuperTypeClassDeclarationCrossReference_0_1_1_0() { return cSuperTypeClassDeclarationCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getSuperTypeClassDeclarationIDTerminalRuleCall_0_1_1_0_1() { return cSuperTypeClassDeclarationIDTerminalRuleCall_0_1_1_0_1; }
		
		//level+=BYTE_ARROW*
		public Assignment getLevelAssignment_0_2() { return cLevelAssignment_0_2; }
		
		//BYTE_ARROW
		public RuleCall getLevelBYTE_ARROWTerminalRuleCall_0_2_0() { return cLevelBYTE_ARROWTerminalRuleCall_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_3_0() { return cNameIDTerminalRuleCall_0_3_0; }
		
		//headline=STRING?
		public Assignment getHeadlineAssignment_0_4() { return cHeadlineAssignment_0_4; }
		
		//STRING
		public RuleCall getHeadlineSTRINGTerminalRuleCall_0_4_0() { return cHeadlineSTRINGTerminalRuleCall_0_4_0; }
		
		//in=[ObjectDeclaration]?
		public Assignment getInAssignment_0_5() { return cInAssignment_0_5; }
		
		//[ObjectDeclaration]
		public CrossReference getInObjectDeclarationCrossReference_0_5_0() { return cInObjectDeclarationCrossReference_0_5_0; }
		
		//ID
		public RuleCall getInObjectDeclarationIDTerminalRuleCall_0_5_0_1() { return cInObjectDeclarationIDTerminalRuleCall_0_5_0_1; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)?
		public Assignment getPropertiesAssignment_0_6() { return cPropertiesAssignment_0_6; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_0_6_0() { return cPropertiesAlternatives_0_6_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_0_6_0_0() { return cPropertiesClassSectionParserRuleCall_0_6_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_0_6_0_1() { return cPropertiesPropertySectionParserRuleCall_0_6_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_0_6_0_2() { return cPropertiesAttributeSectionParserRuleCall_0_6_0_2; }
		
		//(','? properties+=(ClassSection | PropertySection | AttributeSection))*
		public Group getGroup_0_7() { return cGroup_0_7; }
		
		//','?
		public Keyword getCommaKeyword_0_7_0() { return cCommaKeyword_0_7_0; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)
		public Assignment getPropertiesAssignment_0_7_1() { return cPropertiesAssignment_0_7_1; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_0_7_1_0() { return cPropertiesAlternatives_0_7_1_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_0_7_1_0_0() { return cPropertiesClassSectionParserRuleCall_0_7_1_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_0_7_1_0_1() { return cPropertiesPropertySectionParserRuleCall_0_7_1_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_0_7_1_0_2() { return cPropertiesAttributeSectionParserRuleCall_0_7_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class IdlessObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.IdlessObjectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cObjectObjectKeyword_1_0_0 = (Keyword)cObjectAssignment_1_0.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cSuperTypeClassDeclarationCrossReference_1_1_0 = (CrossReference)cSuperTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cSuperTypeClassDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSuperTypeClassDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Assignment cLevelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLevelBYTE_ARROWTerminalRuleCall_2_0 = (RuleCall)cLevelAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInObjectDeclarationCrossReference_4_0 = (CrossReference)cInAssignment_4.eContents().get(0);
		private final RuleCall cInObjectDeclarationIDTerminalRuleCall_4_0_1 = (RuleCall)cInObjectDeclarationCrossReference_4_0.eContents().get(1);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cPropertiesAlternatives_5_0 = (Alternatives)cPropertiesAssignment_5.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_5_0_0 = (RuleCall)cPropertiesAlternatives_5_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_5_0_1 = (RuleCall)cPropertiesAlternatives_5_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_5_0_2 = (RuleCall)cPropertiesAlternatives_5_0.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cPropertiesAlternatives_6_1_0 = (Alternatives)cPropertiesAssignment_6_1.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_6_1_0_0 = (RuleCall)cPropertiesAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_6_1_0_1 = (RuleCall)cPropertiesAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_6_1_0_2 = (RuleCall)cPropertiesAlternatives_6_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IdlessObjectDeclaration:
		//	{ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=STRING?
		//	in=[ObjectDeclaration]?
		//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
		//	AttributeSection))*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=STRING?
		//in=[ObjectDeclaration]? properties+=(ClassSection | PropertySection | AttributeSection)? (','?
		//properties+=(ClassSection | PropertySection | AttributeSection))* ';'
		public Group getGroup() { return cGroup; }
		
		//{ObjectDeclaration}
		public Action getObjectDeclarationAction_0() { return cObjectDeclarationAction_0; }
		
		//(object='Object' | superType=[ClassDeclaration])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//object='Object'
		public Assignment getObjectAssignment_1_0() { return cObjectAssignment_1_0; }
		
		//'Object'
		public Keyword getObjectObjectKeyword_1_0_0() { return cObjectObjectKeyword_1_0_0; }
		
		//superType=[ClassDeclaration]
		public Assignment getSuperTypeAssignment_1_1() { return cSuperTypeAssignment_1_1; }
		
		//[ClassDeclaration]
		public CrossReference getSuperTypeClassDeclarationCrossReference_1_1_0() { return cSuperTypeClassDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getSuperTypeClassDeclarationIDTerminalRuleCall_1_1_0_1() { return cSuperTypeClassDeclarationIDTerminalRuleCall_1_1_0_1; }
		
		//level+=BYTE_ARROW*
		public Assignment getLevelAssignment_2() { return cLevelAssignment_2; }
		
		//BYTE_ARROW
		public RuleCall getLevelBYTE_ARROWTerminalRuleCall_2_0() { return cLevelBYTE_ARROWTerminalRuleCall_2_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//in=[ObjectDeclaration]?
		public Assignment getInAssignment_4() { return cInAssignment_4; }
		
		//[ObjectDeclaration]
		public CrossReference getInObjectDeclarationCrossReference_4_0() { return cInObjectDeclarationCrossReference_4_0; }
		
		//ID
		public RuleCall getInObjectDeclarationIDTerminalRuleCall_4_0_1() { return cInObjectDeclarationIDTerminalRuleCall_4_0_1; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)?
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_5_0() { return cPropertiesAlternatives_5_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_5_0_0() { return cPropertiesClassSectionParserRuleCall_5_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_5_0_1() { return cPropertiesPropertySectionParserRuleCall_5_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_5_0_2() { return cPropertiesAttributeSectionParserRuleCall_5_0_2; }
		
		//(','? properties+=(ClassSection | PropertySection | AttributeSection))*
		public Group getGroup_6() { return cGroup_6; }
		
		//','?
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_6_1_0() { return cPropertiesAlternatives_6_1_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_6_1_0_0() { return cPropertiesClassSectionParserRuleCall_6_1_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_6_1_0_1() { return cPropertiesPropertySectionParserRuleCall_6_1_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_6_1_0_2() { return cPropertiesAttributeSectionParserRuleCall_6_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class NearbyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.NearbyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNearbyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cHeadlineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeadlineSTRINGTerminalRuleCall_3_0 = (RuleCall)cHeadlineAssignment_3.eContents().get(0);
		private final Assignment cInAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInObjectDeclarationCrossReference_4_0 = (CrossReference)cInAssignment_4.eContents().get(0);
		private final RuleCall cInObjectDeclarationIDTerminalRuleCall_4_0_1 = (RuleCall)cInObjectDeclarationCrossReference_4_0.eContents().get(1);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cPropertiesAlternatives_5_0 = (Alternatives)cPropertiesAssignment_5.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_5_0_0 = (RuleCall)cPropertiesAlternatives_5_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_5_0_1 = (RuleCall)cPropertiesAlternatives_5_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_5_0_2 = (RuleCall)cPropertiesAlternatives_5_0.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cPropertiesAlternatives_6_1_0 = (Alternatives)cPropertiesAssignment_6_1.eContents().get(0);
		private final RuleCall cPropertiesClassSectionParserRuleCall_6_1_0_0 = (RuleCall)cPropertiesAlternatives_6_1_0.eContents().get(0);
		private final RuleCall cPropertiesPropertySectionParserRuleCall_6_1_0_1 = (RuleCall)cPropertiesAlternatives_6_1_0.eContents().get(1);
		private final RuleCall cPropertiesAttributeSectionParserRuleCall_6_1_0_2 = (RuleCall)cPropertiesAlternatives_6_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NearbyDeclaration:
		//	{ObjectDeclaration} 'Nearby' name=ID? headline=STRING in=[ObjectDeclaration]?
		//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
		//	AttributeSection))*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectDeclaration} 'Nearby' name=ID? headline=STRING in=[ObjectDeclaration]? properties+=(ClassSection |
		//PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection | AttributeSection))* ';'
		public Group getGroup() { return cGroup; }
		
		//{ObjectDeclaration}
		public Action getObjectDeclarationAction_0() { return cObjectDeclarationAction_0; }
		
		//'Nearby'
		public Keyword getNearbyKeyword_1() { return cNearbyKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//headline=STRING
		public Assignment getHeadlineAssignment_3() { return cHeadlineAssignment_3; }
		
		//STRING
		public RuleCall getHeadlineSTRINGTerminalRuleCall_3_0() { return cHeadlineSTRINGTerminalRuleCall_3_0; }
		
		//in=[ObjectDeclaration]?
		public Assignment getInAssignment_4() { return cInAssignment_4; }
		
		//[ObjectDeclaration]
		public CrossReference getInObjectDeclarationCrossReference_4_0() { return cInObjectDeclarationCrossReference_4_0; }
		
		//ID
		public RuleCall getInObjectDeclarationIDTerminalRuleCall_4_0_1() { return cInObjectDeclarationIDTerminalRuleCall_4_0_1; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)?
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_5_0() { return cPropertiesAlternatives_5_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_5_0_0() { return cPropertiesClassSectionParserRuleCall_5_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_5_0_1() { return cPropertiesPropertySectionParserRuleCall_5_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_5_0_2() { return cPropertiesAttributeSectionParserRuleCall_5_0_2; }
		
		//(','? properties+=(ClassSection | PropertySection | AttributeSection))*
		public Group getGroup_6() { return cGroup_6; }
		
		//','?
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//properties+=(ClassSection | PropertySection | AttributeSection)
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }
		
		//(ClassSection | PropertySection | AttributeSection)
		public Alternatives getPropertiesAlternatives_6_1_0() { return cPropertiesAlternatives_6_1_0; }
		
		//ClassSection
		public RuleCall getPropertiesClassSectionParserRuleCall_6_1_0_0() { return cPropertiesClassSectionParserRuleCall_6_1_0_0; }
		
		//PropertySection
		public RuleCall getPropertiesPropertySectionParserRuleCall_6_1_0_1() { return cPropertiesPropertySectionParserRuleCall_6_1_0_1; }
		
		//AttributeSection
		public RuleCall getPropertiesAttributeSectionParserRuleCall_6_1_0_2() { return cPropertiesAttributeSectionParserRuleCall_6_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class VerbDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.VerbDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVerbDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameVerbKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cMetaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cMetaMetaKeyword_0_2_0 = (Keyword)cMetaAssignment_0_2.eContents().get(0);
		private final Assignment cSynAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSynSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cSynAssignment_0_3.eContents().get(0);
		private final Assignment cDefintionsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cDefintionsVerbBodyParserRuleCall_0_4_0 = (RuleCall)cDefintionsAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVerbDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameExtendKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cOnlyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cOnlyOnlyKeyword_1_2_0 = (Keyword)cOnlyAssignment_1_2.eContents().get(0);
		private final Assignment cSynAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSynSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cSynAssignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cFirstKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cLastKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cDefintionsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cDefintionsVerbBodyParserRuleCall_1_5_0 = (RuleCall)cDefintionsAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//VerbDeclaration:
		//	{VerbDeclaration} name='Verb' ^meta='meta'? syn+=STRING* defintions+=VerbBody* ';'
		//	| {VerbDeclaration} name='Extend' only='only'? syn+=STRING* ('first' | 'last')? defintions+=VerbBody* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{VerbDeclaration} name='Verb' ^meta='meta'? syn+=STRING* defintions+=VerbBody* ';' | {VerbDeclaration} name='Extend'
		//only='only'? syn+=STRING* ('first' | 'last')? defintions+=VerbBody* ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{VerbDeclaration} name='Verb' ^meta='meta'? syn+=STRING* defintions+=VerbBody* ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//{VerbDeclaration}
		public Action getVerbDeclarationAction_0_0() { return cVerbDeclarationAction_0_0; }
		
		//name='Verb'
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//'Verb'
		public Keyword getNameVerbKeyword_0_1_0() { return cNameVerbKeyword_0_1_0; }
		
		//^meta='meta'?
		public Assignment getMetaAssignment_0_2() { return cMetaAssignment_0_2; }
		
		//'meta'
		public Keyword getMetaMetaKeyword_0_2_0() { return cMetaMetaKeyword_0_2_0; }
		
		//syn+=STRING*
		public Assignment getSynAssignment_0_3() { return cSynAssignment_0_3; }
		
		//STRING
		public RuleCall getSynSTRINGTerminalRuleCall_0_3_0() { return cSynSTRINGTerminalRuleCall_0_3_0; }
		
		//defintions+=VerbBody*
		public Assignment getDefintionsAssignment_0_4() { return cDefintionsAssignment_0_4; }
		
		//VerbBody
		public RuleCall getDefintionsVerbBodyParserRuleCall_0_4_0() { return cDefintionsVerbBodyParserRuleCall_0_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }
		
		//{VerbDeclaration} name='Extend' only='only'? syn+=STRING* ('first' | 'last')? defintions+=VerbBody* ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//{VerbDeclaration}
		public Action getVerbDeclarationAction_1_0() { return cVerbDeclarationAction_1_0; }
		
		//name='Extend'
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//'Extend'
		public Keyword getNameExtendKeyword_1_1_0() { return cNameExtendKeyword_1_1_0; }
		
		//only='only'?
		public Assignment getOnlyAssignment_1_2() { return cOnlyAssignment_1_2; }
		
		//'only'
		public Keyword getOnlyOnlyKeyword_1_2_0() { return cOnlyOnlyKeyword_1_2_0; }
		
		//syn+=STRING*
		public Assignment getSynAssignment_1_3() { return cSynAssignment_1_3; }
		
		//STRING
		public RuleCall getSynSTRINGTerminalRuleCall_1_3_0() { return cSynSTRINGTerminalRuleCall_1_3_0; }
		
		//('first' | 'last')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//'first'
		public Keyword getFirstKeyword_1_4_0() { return cFirstKeyword_1_4_0; }
		
		//'last'
		public Keyword getLastKeyword_1_4_1() { return cLastKeyword_1_4_1; }
		
		//defintions+=VerbBody*
		public Assignment getDefintionsAssignment_1_5() { return cDefintionsAssignment_1_5; }
		
		//VerbBody
		public RuleCall getDefintionsVerbBodyParserRuleCall_1_5_0() { return cDefintionsVerbBodyParserRuleCall_1_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
	}
	public class VerbBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.VerbBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsVerbAssignmentParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		private final RuleCall cBYTE_ARROWTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cReverseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cReverseReverseKeyword_4_0 = (Keyword)cReverseAssignment_4.eContents().get(0);
		
		//VerbBody:
		//	'*' definitions+=VerbAssignment* BYTE_ARROW name=ID reverse='reverse'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' definitions+=VerbAssignment* BYTE_ARROW name=ID reverse='reverse'?
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//definitions+=VerbAssignment*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }
		
		//VerbAssignment
		public RuleCall getDefinitionsVerbAssignmentParserRuleCall_1_0() { return cDefinitionsVerbAssignmentParserRuleCall_1_0; }
		
		//BYTE_ARROW
		public RuleCall getBYTE_ARROWTerminalRuleCall_2() { return cBYTE_ARROWTerminalRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//reverse='reverse'?
		public Assignment getReverseAssignment_4() { return cReverseAssignment_4; }
		
		//'reverse'
		public Keyword getReverseReverseKeyword_4_0() { return cReverseReverseKeyword_4_0; }
	}
	public class VerbAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.VerbAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVerbAssignmentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cSolidusKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		
		//VerbAssignment:
		//	Primary
		//	| ID '=' Primary
		//	| {VerbAssignment} STRING ('/' STRING)+;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary | ID '=' Primary | {VerbAssignment} STRING ('/' STRING)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//ID '=' Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_1_2() { return cPrimaryParserRuleCall_1_2; }
		
		//{VerbAssignment} STRING ('/' STRING)+
		public Group getGroup_2() { return cGroup_2; }
		
		//{VerbAssignment}
		public Action getVerbAssignmentAction_2_0() { return cVerbAssignmentAction_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }
		
		//('/' STRING)+
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_2_0() { return cSolidusKeyword_2_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_2_1() { return cSTRINGTerminalRuleCall_2_2_1; }
	}
	public class ArrayDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ArrayDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameBufferKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cArrayBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayBodyArrayTypeParserRuleCall_2_0 = (RuleCall)cArrayBodyAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayDeclaration:
		//	'Array' name=(ID | 'buffer') arrayBody=ArrayType
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Array' name=(ID | 'buffer') arrayBody=ArrayType ';'
		public Group getGroup() { return cGroup; }
		
		//'Array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }
		
		//name=(ID | 'buffer')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | 'buffer')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'buffer'
		public Keyword getNameBufferKeyword_1_0_1() { return cNameBufferKeyword_1_0_1; }
		
		//arrayBody=ArrayType
		public Assignment getArrayBodyAssignment_2() { return cArrayBodyAssignment_2; }
		
		//ArrayType
		public RuleCall getArrayBodyArrayTypeParserRuleCall_2_0() { return cArrayBodyArrayTypeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ArrayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBYTE_ARRAYAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeBYTE_ARROWTerminalRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cContentAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cContentPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cContentAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWORD_ARRAYAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeWORD_ARROWTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cContentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cContentPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cContentAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTABLE_ARRAYAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cTypeAlternatives_2_1_0 = (Alternatives)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cTypeTableKeyword_2_1_0_0 = (Keyword)cTypeAlternatives_2_1_0.eContents().get(0);
		private final Keyword cTypeBufferKeyword_2_1_0_1 = (Keyword)cTypeAlternatives_2_1_0.eContents().get(1);
		private final Assignment cSizeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSizePrimaryParserRuleCall_2_2_0 = (RuleCall)cSizeAssignment_2_2.eContents().get(0);
		private final Assignment cContentAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cContentPrimaryParserRuleCall_2_3_0 = (RuleCall)cContentAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSTRING_ARRAYAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cTypeStringKeyword_3_1_0 = (Keyword)cTypeAssignment_3_1.eContents().get(0);
		private final Assignment cSizeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSizePrimaryParserRuleCall_3_2_0 = (RuleCall)cSizeAssignment_3_2.eContents().get(0);
		private final Assignment cContentAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_3_0 = (RuleCall)cContentAssignment_3_3.eContents().get(0);
		
		//// TODO: See Swedish.h, arrays need to be further refined
		//ArrayType:
		//	{BYTE_ARRAY} type=BYTE_ARROW content+=PrimaryExpression*
		//	| {WORD_ARRAY} type=WORD_ARROW content+=PrimaryExpression*
		//	| {TABLE_ARRAY} type=('table' | 'buffer') size=Primary? content+=Primary*
		//	| {STRING_ARRAY} type='string' size=Primary? content+=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BYTE_ARRAY} type=BYTE_ARROW content+=PrimaryExpression* | {WORD_ARRAY} type=WORD_ARROW content+=PrimaryExpression* |
		//{TABLE_ARRAY} type=('table' | 'buffer') size=Primary? content+=Primary* | {STRING_ARRAY} type='string' size=Primary?
		//content+=STRING?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BYTE_ARRAY} type=BYTE_ARROW content+=PrimaryExpression*
		public Group getGroup_0() { return cGroup_0; }
		
		//{BYTE_ARRAY}
		public Action getBYTE_ARRAYAction_0_0() { return cBYTE_ARRAYAction_0_0; }
		
		//type=BYTE_ARROW
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//BYTE_ARROW
		public RuleCall getTypeBYTE_ARROWTerminalRuleCall_0_1_0() { return cTypeBYTE_ARROWTerminalRuleCall_0_1_0; }
		
		//content+=PrimaryExpression*
		public Assignment getContentAssignment_0_2() { return cContentAssignment_0_2; }
		
		//PrimaryExpression
		public RuleCall getContentPrimaryExpressionParserRuleCall_0_2_0() { return cContentPrimaryExpressionParserRuleCall_0_2_0; }
		
		//{WORD_ARRAY} type=WORD_ARROW content+=PrimaryExpression*
		public Group getGroup_1() { return cGroup_1; }
		
		//{WORD_ARRAY}
		public Action getWORD_ARRAYAction_1_0() { return cWORD_ARRAYAction_1_0; }
		
		//type=WORD_ARROW
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//WORD_ARROW
		public RuleCall getTypeWORD_ARROWTerminalRuleCall_1_1_0() { return cTypeWORD_ARROWTerminalRuleCall_1_1_0; }
		
		//content+=PrimaryExpression*
		public Assignment getContentAssignment_1_2() { return cContentAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getContentPrimaryExpressionParserRuleCall_1_2_0() { return cContentPrimaryExpressionParserRuleCall_1_2_0; }
		
		//{TABLE_ARRAY} type=('table' | 'buffer') size=Primary? content+=Primary*
		public Group getGroup_2() { return cGroup_2; }
		
		//{TABLE_ARRAY}
		public Action getTABLE_ARRAYAction_2_0() { return cTABLE_ARRAYAction_2_0; }
		
		//type=('table' | 'buffer')
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//('table' | 'buffer')
		public Alternatives getTypeAlternatives_2_1_0() { return cTypeAlternatives_2_1_0; }
		
		//'table'
		public Keyword getTypeTableKeyword_2_1_0_0() { return cTypeTableKeyword_2_1_0_0; }
		
		//'buffer'
		public Keyword getTypeBufferKeyword_2_1_0_1() { return cTypeBufferKeyword_2_1_0_1; }
		
		//size=Primary?
		public Assignment getSizeAssignment_2_2() { return cSizeAssignment_2_2; }
		
		//Primary
		public RuleCall getSizePrimaryParserRuleCall_2_2_0() { return cSizePrimaryParserRuleCall_2_2_0; }
		
		//content+=Primary*
		public Assignment getContentAssignment_2_3() { return cContentAssignment_2_3; }
		
		//Primary
		public RuleCall getContentPrimaryParserRuleCall_2_3_0() { return cContentPrimaryParserRuleCall_2_3_0; }
		
		//{STRING_ARRAY} type='string' size=Primary? content+=STRING?
		public Group getGroup_3() { return cGroup_3; }
		
		//{STRING_ARRAY}
		public Action getSTRING_ARRAYAction_3_0() { return cSTRING_ARRAYAction_3_0; }
		
		//type='string'
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//'string'
		public Keyword getTypeStringKeyword_3_1_0() { return cTypeStringKeyword_3_1_0; }
		
		//size=Primary?
		public Assignment getSizeAssignment_3_2() { return cSizeAssignment_3_2; }
		
		//Primary
		public RuleCall getSizePrimaryParserRuleCall_3_2_0() { return cSizePrimaryParserRuleCall_3_2_0; }
		
		//content+=STRING?
		public Assignment getContentAssignment_3_3() { return cContentAssignment_3_3; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_3_0() { return cContentSTRINGTerminalRuleCall_3_3_0; }
	}
	public class ClassSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.ClassSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertySectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameClassKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassPropertyPropertyParserRuleCall_2_0 = (RuleCall)cClassPropertyAssignment_2.eContents().get(0);
		
		//ClassSection:
		//	{PropertySection} name='class' classProperty=Property;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertySection} name='class' classProperty=Property
		public Group getGroup() { return cGroup; }
		
		//{PropertySection}
		public Action getPropertySectionAction_0() { return cPropertySectionAction_0; }
		
		//name='class'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'class'
		public Keyword getNameClassKeyword_1_0() { return cNameClassKeyword_1_0; }
		
		//classProperty=Property
		public Assignment getClassPropertyAssignment_2() { return cClassPropertyAssignment_2; }
		
		//Property
		public RuleCall getClassPropertyPropertyParserRuleCall_2_0() { return cClassPropertyPropertyParserRuleCall_2_0; }
	}
	public class PropertySectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.PropertySection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cPropertySectionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Alternatives cNameAlternatives_0_0_1_0 = (Alternatives)cNameAssignment_0_0_1.eContents().get(0);
		private final Keyword cNameWithKeyword_0_0_1_0_0 = (Keyword)cNameAlternatives_0_0_1_0.eContents().get(0);
		private final Keyword cNamePrivateKeyword_0_0_1_0_1 = (Keyword)cNameAlternatives_0_0_1_0.eContents().get(1);
		private final Assignment cPropertiesAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_0_0_2_0 = (RuleCall)cPropertiesAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_0_3 = (Group)cGroup_0_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_0_3_0 = (Keyword)cGroup_0_0_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_0_0_3_1 = (Assignment)cGroup_0_0_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_0_0_3_1_0 = (RuleCall)cPropertiesAssignment_0_0_3_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cPropertySectionAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final RuleCall cPREPROCESSORDIRTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PropertySection:
		//	({PropertySection} name=('with' | 'private') properties+=Property? (',' properties+=Property)*
		//	| {PropertySection} PREPROCESSORDIR) ','?;
		@Override public ParserRule getRule() { return rule; }
		
		//({PropertySection} name=('with' | 'private') properties+=Property? (',' properties+=Property)* | {PropertySection}
		//PREPROCESSORDIR) ','?
		public Group getGroup() { return cGroup; }
		
		//({PropertySection} name=('with' | 'private') properties+=Property? (',' properties+=Property)* | {PropertySection}
		//PREPROCESSORDIR)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{PropertySection} name=('with' | 'private') properties+=Property? (',' properties+=Property)*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{PropertySection}
		public Action getPropertySectionAction_0_0_0() { return cPropertySectionAction_0_0_0; }
		
		//name=('with' | 'private')
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }
		
		//('with' | 'private')
		public Alternatives getNameAlternatives_0_0_1_0() { return cNameAlternatives_0_0_1_0; }
		
		//'with'
		public Keyword getNameWithKeyword_0_0_1_0_0() { return cNameWithKeyword_0_0_1_0_0; }
		
		//'private'
		public Keyword getNamePrivateKeyword_0_0_1_0_1() { return cNamePrivateKeyword_0_0_1_0_1; }
		
		//properties+=Property?
		public Assignment getPropertiesAssignment_0_0_2() { return cPropertiesAssignment_0_0_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0_0_2_0() { return cPropertiesPropertyParserRuleCall_0_0_2_0; }
		
		//(',' properties+=Property)*
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_0_3_0() { return cCommaKeyword_0_0_3_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_0_0_3_1() { return cPropertiesAssignment_0_0_3_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0_0_3_1_0() { return cPropertiesPropertyParserRuleCall_0_0_3_1_0; }
		
		//{PropertySection} PREPROCESSORDIR
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{PropertySection}
		public Action getPropertySectionAction_0_1_0() { return cPropertySectionAction_0_1_0; }
		
		//PREPROCESSORDIR
		public RuleCall getPREPROCESSORDIRTerminalRuleCall_0_1_1() { return cPREPROCESSORDIRTerminalRuleCall_0_1_1; }
		
		//','?
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class AttributeSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.AttributeSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameHasKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		
		//AttributeSection:
		//	{AttributeSection} name='has' attributes+=Attribute attributes+=Attribute*;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeSection} name='has' attributes+=Attribute attributes+=Attribute*
		public Group getGroup() { return cGroup; }
		
		//{AttributeSection}
		public Action getAttributeSectionAction_0() { return cAttributeSectionAction_0; }
		
		//name='has'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'has'
		public Keyword getNameHasKeyword_1_0() { return cNameHasKeyword_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cObjectAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cObjectObjectDeclarationCrossReference_0_2_0 = (CrossReference)cObjectAssignment_0_2.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_0_2_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cMethodAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cMethodMethodParserRuleCall_1_2_0_0 = (RuleCall)cMethodAssignment_1_2_0.eContents().get(0);
		private final Assignment cArrayAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cArrayAbstractArrayParserRuleCall_1_2_1_0 = (RuleCall)cArrayAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameDIRECTIONSTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cObjectReferenceAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final CrossReference cObjectReferenceObjectDeclarationCrossReference_2_2_0_0 = (CrossReference)cObjectReferenceAssignment_2_2_0.eContents().get(0);
		private final RuleCall cObjectReferenceObjectDeclarationIDTerminalRuleCall_2_2_0_0_1 = (RuleCall)cObjectReferenceObjectDeclarationCrossReference_2_2_0_0.eContents().get(1);
		private final Assignment cValueAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cValuePrimaryParserRuleCall_2_2_1_0 = (RuleCall)cValueAssignment_2_2_1.eContents().get(0);
		private final Assignment cMethodAssignment_2_2_2 = (Assignment)cAlternatives_2_2.eContents().get(2);
		private final RuleCall cMethodMethodParserRuleCall_2_2_2_0 = (RuleCall)cMethodAssignment_2_2_2.eContents().get(0);
		private final Assignment cArrayAssignment_2_2_3 = (Assignment)cAlternatives_2_2.eContents().get(3);
		private final RuleCall cArrayAbstractArrayParserRuleCall_2_2_3_0 = (RuleCall)cArrayAssignment_2_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFound_inKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cObjectReferencesAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final CrossReference cObjectReferencesObjectDeclarationCrossReference_3_2_0_0 = (CrossReference)cObjectReferencesAssignment_3_2_0.eContents().get(0);
		private final RuleCall cObjectReferencesObjectDeclarationIDTerminalRuleCall_3_2_0_0_1 = (RuleCall)cObjectReferencesObjectDeclarationCrossReference_3_2_0_0.eContents().get(1);
		private final Assignment cMethodAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_3_2_1_0 = (RuleCall)cMethodAssignment_3_2_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2_2 = (Assignment)cAlternatives_3_2.eContents().get(2);
		private final RuleCall cValuePrimaryParserRuleCall_3_2_2_0 = (RuleCall)cValueAssignment_3_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_3_0 = (RuleCall)cNameAssignment_3_3.eContents().get(0);
		private final Assignment cValAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cValPrimaryParserRuleCall_3_4_0 = (RuleCall)cValAssignment_3_4.eContents().get(0);
		
		////FIXME: DIRECTIONS here should be able to cross reference the same way as attributes, 
		//// so it should be removed and be replaced with something either as [PropertyDirective|ID] or
		//// ID if not declared before
		////FIXME: remove found_in and replace with a more general approach
		//Property:
		//	{Property} name=ID object=[ObjectDeclaration] | {Property} name=ID (method=Method | array=AbstractArray) | {Property}
		//	name=DIRECTIONS (objectReference=[ObjectDeclaration] | value=Primary
		//	| method=Method
		//	| array=AbstractArray) | {Property} 'found_in' (objectReferences+=[ObjectDeclaration]*
		//	| method=Method
		//	| value=Primary) name=ID val=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//{Property} name=ID object=[ObjectDeclaration] | {Property} name=ID (method=Method | array=AbstractArray) | {Property}
		//name=DIRECTIONS (objectReference=[ObjectDeclaration] | value=Primary | method=Method | array=AbstractArray) |
		//{Property} 'found_in' (objectReferences+=[ObjectDeclaration]* | method=Method | value=Primary) name=ID val=Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Property} name=ID object=[ObjectDeclaration]
		public Group getGroup_0() { return cGroup_0; }
		
		//{Property}
		public Action getPropertyAction_0_0() { return cPropertyAction_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//object=[ObjectDeclaration]
		public Assignment getObjectAssignment_0_2() { return cObjectAssignment_0_2; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_0_2_0() { return cObjectObjectDeclarationCrossReference_0_2_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_0_2_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_0_2_0_1; }
		
		//{Property} name=ID (method=Method | array=AbstractArray)
		public Group getGroup_1() { return cGroup_1; }
		
		//{Property}
		public Action getPropertyAction_1_0() { return cPropertyAction_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//(method=Method | array=AbstractArray)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//method=Method
		public Assignment getMethodAssignment_1_2_0() { return cMethodAssignment_1_2_0; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_1_2_0_0() { return cMethodMethodParserRuleCall_1_2_0_0; }
		
		//array=AbstractArray
		public Assignment getArrayAssignment_1_2_1() { return cArrayAssignment_1_2_1; }
		
		//AbstractArray
		public RuleCall getArrayAbstractArrayParserRuleCall_1_2_1_0() { return cArrayAbstractArrayParserRuleCall_1_2_1_0; }
		
		//{Property} name=DIRECTIONS (objectReference=[ObjectDeclaration] | value=Primary | method=Method | array=AbstractArray)
		public Group getGroup_2() { return cGroup_2; }
		
		//{Property}
		public Action getPropertyAction_2_0() { return cPropertyAction_2_0; }
		
		//name=DIRECTIONS
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//DIRECTIONS
		public RuleCall getNameDIRECTIONSTerminalRuleCall_2_1_0() { return cNameDIRECTIONSTerminalRuleCall_2_1_0; }
		
		//(objectReference=[ObjectDeclaration] | value=Primary | method=Method | array=AbstractArray)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//objectReference=[ObjectDeclaration]
		public Assignment getObjectReferenceAssignment_2_2_0() { return cObjectReferenceAssignment_2_2_0; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectReferenceObjectDeclarationCrossReference_2_2_0_0() { return cObjectReferenceObjectDeclarationCrossReference_2_2_0_0; }
		
		//ID
		public RuleCall getObjectReferenceObjectDeclarationIDTerminalRuleCall_2_2_0_0_1() { return cObjectReferenceObjectDeclarationIDTerminalRuleCall_2_2_0_0_1; }
		
		//value=Primary
		public Assignment getValueAssignment_2_2_1() { return cValueAssignment_2_2_1; }
		
		//Primary
		public RuleCall getValuePrimaryParserRuleCall_2_2_1_0() { return cValuePrimaryParserRuleCall_2_2_1_0; }
		
		//method=Method
		public Assignment getMethodAssignment_2_2_2() { return cMethodAssignment_2_2_2; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_2_2_2_0() { return cMethodMethodParserRuleCall_2_2_2_0; }
		
		//array=AbstractArray
		public Assignment getArrayAssignment_2_2_3() { return cArrayAssignment_2_2_3; }
		
		//AbstractArray
		public RuleCall getArrayAbstractArrayParserRuleCall_2_2_3_0() { return cArrayAbstractArrayParserRuleCall_2_2_3_0; }
		
		//{Property} 'found_in' (objectReferences+=[ObjectDeclaration]* | method=Method | value=Primary) name=ID val=Primary
		public Group getGroup_3() { return cGroup_3; }
		
		//{Property}
		public Action getPropertyAction_3_0() { return cPropertyAction_3_0; }
		
		//'found_in'
		public Keyword getFound_inKeyword_3_1() { return cFound_inKeyword_3_1; }
		
		//(objectReferences+=[ObjectDeclaration]* | method=Method | value=Primary)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//objectReferences+=[ObjectDeclaration]*
		public Assignment getObjectReferencesAssignment_3_2_0() { return cObjectReferencesAssignment_3_2_0; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectReferencesObjectDeclarationCrossReference_3_2_0_0() { return cObjectReferencesObjectDeclarationCrossReference_3_2_0_0; }
		
		//ID
		public RuleCall getObjectReferencesObjectDeclarationIDTerminalRuleCall_3_2_0_0_1() { return cObjectReferencesObjectDeclarationIDTerminalRuleCall_3_2_0_0_1; }
		
		//method=Method
		public Assignment getMethodAssignment_3_2_1() { return cMethodAssignment_3_2_1; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_3_2_1_0() { return cMethodMethodParserRuleCall_3_2_1_0; }
		
		//value=Primary
		public Assignment getValueAssignment_3_2_2() { return cValueAssignment_3_2_2; }
		
		//Primary
		public RuleCall getValuePrimaryParserRuleCall_3_2_2_0() { return cValuePrimaryParserRuleCall_3_2_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_3() { return cNameAssignment_3_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_3_0() { return cNameIDTerminalRuleCall_3_3_0; }
		
		//val=Primary
		public Assignment getValAssignment_3_4() { return cValAssignment_3_4; }
		
		//Primary
		public RuleCall getValPrimaryParserRuleCall_3_4_0() { return cValPrimaryParserRuleCall_3_4_0; }
	}
	public class AbstractArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.AbstractArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArrayPrimaryParserRuleCall_1_0_0 = (RuleCall)cArrayAssignment_1_0.eContents().get(0);
		private final Assignment cArrayAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayPrimaryParserRuleCall_1_1_0 = (RuleCall)cArrayAssignment_1_1.eContents().get(0);
		
		//AbstractArray:
		//	{AbstractArray} (array+=Primary? array+=Primary*);
		@Override public ParserRule getRule() { return rule; }
		
		//{AbstractArray} (array+=Primary? array+=Primary*)
		public Group getGroup() { return cGroup; }
		
		//{AbstractArray}
		public Action getAbstractArrayAction_0() { return cAbstractArrayAction_0; }
		
		//(array+=Primary? array+=Primary*)
		public Group getGroup_1() { return cGroup_1; }
		
		//array+=Primary?
		public Assignment getArrayAssignment_1_0() { return cArrayAssignment_1_0; }
		
		//Primary
		public RuleCall getArrayPrimaryParserRuleCall_1_0_0() { return cArrayPrimaryParserRuleCall_1_0_0; }
		
		//array+=Primary*
		public Assignment getArrayAssignment_1_1() { return cArrayAssignment_1_1; }
		
		//Primary
		public RuleCall getArrayPrimaryParserRuleCall_1_1_0() { return cArrayPrimaryParserRuleCall_1_1_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_1_0 = (RuleCall)cFunctionBodyAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Method AbstractProperty:
		//	'[' functionBody=FunctionBody ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' functionBody=FunctionBody ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//functionBody=FunctionBody
		public Assignment getFunctionBodyAssignment_1() { return cFunctionBodyAssignment_1; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_1_0() { return cFunctionBodyFunctionBodyParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class GlobalFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.GlobalFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionHeaderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionHeaderFunctionHeaderParserRuleCall_1_0 = (RuleCall)cFunctionHeaderAssignment_1.eContents().get(0);
		private final Assignment cFunctionBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_2_0 = (RuleCall)cFunctionBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GlobalFunctionDefinition:
		//	'['
		//	functionHeader=FunctionHeader?
		//	functionBody=FunctionBody
		//	']'
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' functionHeader=FunctionHeader? functionBody=FunctionBody ']' ';'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//functionHeader=FunctionHeader?
		public Assignment getFunctionHeaderAssignment_1() { return cFunctionHeaderAssignment_1; }
		
		//FunctionHeader
		public RuleCall getFunctionHeaderFunctionHeaderParserRuleCall_1_0() { return cFunctionHeaderFunctionHeaderParserRuleCall_1_0; }
		
		//functionBody=FunctionBody
		public Assignment getFunctionBodyAssignment_2() { return cFunctionBodyAssignment_2; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_2_0() { return cFunctionBodyFunctionBodyParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		
		//FunctionBody Expression:
		//	{Expression} expressions+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} expressions+=Expression*
		public Group getGroup() { return cGroup; }
		
		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }
	}
	public class FunctionHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.FunctionHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionHeaderAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesIDTerminalRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FunctionHeader:
		//	{FunctionHeader} variables+=ID* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionHeader} variables+=ID* ';'
		public Group getGroup() { return cGroup; }
		
		//{FunctionHeader}
		public Action getFunctionHeaderAction_0() { return cFunctionHeaderAction_0; }
		
		//variables+=ID*
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//ID
		public RuleCall getVariablesIDTerminalRuleCall_1_0() { return cVariablesIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftPrimaryParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cSolidusKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_1_2 = (Keyword)cAlternatives_0_1.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_0_1_3 = (Keyword)cAlternatives_0_1.eContents().get(3);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftPrimaryParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cLeftAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLeftPrimaryParserRuleCall_2_0_0 = (RuleCall)cLeftAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		///* 
		//ReturnStatement:
		//	('return' (rvalueObj=[ObjectDeclaration|ID]|rvalue=Primary))
		//	|rboolean='rtrue'
		//	|rboolean='rfalse' 
		//	';'
		//;
		//
		//PrintStatement returns Expression:
		//	{Expression} ('print'|'print_ret')? text=STRING ';'
		//;
		//
		//HasHasntStatement:
		//	('has'|'hasnt') attribute=[AttributeDeclaration|ID]
		//;
		//
		//InStatement:
		//	( first=([ObjectDeclaration|ID]) 'in' second=([ObjectDeclaration|ID]) )
		//	| firstID=Primary 'in' secondID=Primary
		//;
		//
		//NotInStatement:
		//	( first=([ObjectDeclaration|ID]) 'notin' second=([ObjectDeclaration|ID]) )
		//	| firstID=Primary 'notin' secondID=Primary
		//;
		//
		//PlayerToStatement returns FunctionBody:
		//	'PlayerTo' '(' (location=[ObjectDeclaration|ID]|primary=Primary) ')' ';'
		//;
		//
		//GiveStatement returns FunctionBody:
		//	'give' (first=[ObjectDeclaration|ID]|expr=Expression)  attribute=[AttributeDeclaration|ID] ';'
		//;
		//
		//MoveStatement returns FunctionBody:
		//	{FunctionBody} 'move' object1=[ObjectDeclaration|ID] 'to' object2=[ObjectDeclaration|ID] ';'
		//;*/ // NOTE: Just enough to make statements such as
		//// PARSE_BUFFER_LEN/WORDSIZE pass. Needs to be handled recursively
		//PrimaryExpression:
		//	left=Primary ('/' | '*' | '+' | '-') right=Primary
		//	| '(' left=Primary ')'
		//	| left=Primary ('(' params+=Expression* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Primary ('/' | '*' | '+' | '-') right=Primary | '(' left=Primary ')' | left=Primary ('(' params+=Expression* ')')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=Primary ('/' | '*' | '+' | '-') right=Primary
		public Group getGroup_0() { return cGroup_0; }
		
		//left=Primary
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_0_0_0() { return cLeftPrimaryParserRuleCall_0_0_0; }
		
		//('/' | '*' | '+' | '-')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_0_1_0() { return cSolidusKeyword_0_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1_1() { return cAsteriskKeyword_0_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1_2() { return cPlusSignKeyword_0_1_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1_3() { return cHyphenMinusKeyword_0_1_3; }
		
		//right=Primary
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_0_2_0() { return cRightPrimaryParserRuleCall_0_2_0; }
		
		//'(' left=Primary ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//left=Primary
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_1_1_0() { return cLeftPrimaryParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//left=Primary ('(' params+=Expression* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//left=Primary
		public Assignment getLeftAssignment_2_0() { return cLeftAssignment_2_0; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_2_0_0() { return cLeftPrimaryParserRuleCall_2_0_0; }
		
		//('(' params+=Expression* ')')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//params+=Expression*
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_1_1_0() { return cParamsExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAnyTokenAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cAnyTokenAnyTokenParserRuleCall_0_0_0 = (RuleCall)cAnyTokenAssignment_0_0.eContents().get(0);
		private final Assignment cSemicolonAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonSemicolonKeyword_0_1_0 = (Keyword)cSemicolonAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///* Encapsulates all possibly combinations into one abstract function body 
		// * TODO: this should be broken up into real expression and statements, so real 
		// * analysis can be made
		// */ Expression FunctionBody:
		//	(anyToken=AnyToken | semicolon=';') ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(anyToken=AnyToken | semicolon=';') ';'?
		public Group getGroup() { return cGroup; }
		
		//(anyToken=AnyToken | semicolon=';')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//anyToken=AnyToken
		public Assignment getAnyTokenAssignment_0_0() { return cAnyTokenAssignment_0_0; }
		
		//AnyToken
		public RuleCall getAnyTokenAnyTokenParserRuleCall_0_0_0() { return cAnyTokenAnyTokenParserRuleCall_0_0_0; }
		
		//semicolon=';'
		public Assignment getSemicolonAssignment_0_1() { return cSemicolonAssignment_0_1; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_0_1_0() { return cSemicolonSemicolonKeyword_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class AnyTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.AnyToken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cUnparsedAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cUnparsedUnparsedTokenParserRuleCall_1_0_0 = (RuleCall)cUnparsedAssignment_1_0.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cML_COMMENTTerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final RuleCall cWSTerminalRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final RuleCall cPREPROCESSORDIRTerminalRuleCall_1_8 = (RuleCall)cAlternatives_1.eContents().get(8);
		private final RuleCall cBYTE_ARROWTerminalRuleCall_1_9 = (RuleCall)cAlternatives_1.eContents().get(9);
		private final RuleCall cWORD_ARROWTerminalRuleCall_1_10 = (RuleCall)cAlternatives_1.eContents().get(10);
		private final RuleCall cDIRECTIONSTerminalRuleCall_1_11 = (RuleCall)cAlternatives_1.eContents().get(11);
		private final RuleCall cHEXTerminalRuleCall_1_12 = (RuleCall)cAlternatives_1.eContents().get(12);
		private final RuleCall cBINARYTerminalRuleCall_1_13 = (RuleCall)cAlternatives_1.eContents().get(13);
		
		///* Any token besides ';' */ AnyToken:
		//	{FunctionBody} (unparsed=UnparsedToken | ANY_OTHER | STRING | INT | ID | ML_COMMENT | SL_COMMENT | WS
		//	| PREPROCESSORDIR
		//	| BYTE_ARROW
		//	| WORD_ARROW
		//	| DIRECTIONS
		//	| HEX
		//	| BINARY);
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionBody} (unparsed=UnparsedToken | ANY_OTHER | STRING | INT | ID | ML_COMMENT | SL_COMMENT | WS | PREPROCESSORDIR
		//| BYTE_ARROW | WORD_ARROW | DIRECTIONS | HEX | BINARY)
		public Group getGroup() { return cGroup; }
		
		//{FunctionBody}
		public Action getFunctionBodyAction_0() { return cFunctionBodyAction_0; }
		
		//(unparsed=UnparsedToken | ANY_OTHER | STRING | INT | ID | ML_COMMENT | SL_COMMENT | WS | PREPROCESSORDIR | BYTE_ARROW |
		//WORD_ARROW | DIRECTIONS | HEX | BINARY)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unparsed=UnparsedToken
		public Assignment getUnparsedAssignment_1_0() { return cUnparsedAssignment_1_0; }
		
		//UnparsedToken
		public RuleCall getUnparsedUnparsedTokenParserRuleCall_1_0_0() { return cUnparsedUnparsedTokenParserRuleCall_1_0_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1_1() { return cANY_OTHERTerminalRuleCall_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_4() { return cIDTerminalRuleCall_1_4; }
		
		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall_1_5() { return cML_COMMENTTerminalRuleCall_1_5; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1_6() { return cSL_COMMENTTerminalRuleCall_1_6; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_7() { return cWSTerminalRuleCall_1_7; }
		
		//PREPROCESSORDIR
		public RuleCall getPREPROCESSORDIRTerminalRuleCall_1_8() { return cPREPROCESSORDIRTerminalRuleCall_1_8; }
		
		//BYTE_ARROW
		public RuleCall getBYTE_ARROWTerminalRuleCall_1_9() { return cBYTE_ARROWTerminalRuleCall_1_9; }
		
		//WORD_ARROW
		public RuleCall getWORD_ARROWTerminalRuleCall_1_10() { return cWORD_ARROWTerminalRuleCall_1_10; }
		
		//DIRECTIONS
		public RuleCall getDIRECTIONSTerminalRuleCall_1_11() { return cDIRECTIONSTerminalRuleCall_1_11; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_1_12() { return cHEXTerminalRuleCall_1_12; }
		
		//BINARY
		public RuleCall getBINARYTerminalRuleCall_1_13() { return cBINARYTerminalRuleCall_1_13; }
	}
	public class UnparsedTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.UnparsedToken");
		private final Assignment cTokenAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTokenAlternatives_0 = (Alternatives)cTokenAssignment.eContents().get(0);
		private final Keyword cTokenColonKeyword_0_0 = (Keyword)cTokenAlternatives_0.eContents().get(0);
		private final Keyword cTokenLeftParenthesisKeyword_0_1 = (Keyword)cTokenAlternatives_0.eContents().get(1);
		private final Keyword cTokenRightParenthesisKeyword_0_2 = (Keyword)cTokenAlternatives_0.eContents().get(2);
		private final Keyword cTokenSolidusKeyword_0_3 = (Keyword)cTokenAlternatives_0.eContents().get(3);
		private final Keyword cTokenHyphenMinusKeyword_0_4 = (Keyword)cTokenAlternatives_0.eContents().get(4);
		private final Keyword cTokenHyphenMinusHyphenMinusKeyword_0_5 = (Keyword)cTokenAlternatives_0.eContents().get(5);
		private final Keyword cTokenPlusSignKeyword_0_6 = (Keyword)cTokenAlternatives_0.eContents().get(6);
		private final Keyword cTokenTildeKeyword_0_7 = (Keyword)cTokenAlternatives_0.eContents().get(7);
		private final Keyword cTokenEqualsSignKeyword_0_8 = (Keyword)cTokenAlternatives_0.eContents().get(8);
		private final Keyword cTokenExclamationMarkKeyword_0_9 = (Keyword)cTokenAlternatives_0.eContents().get(9);
		private final Keyword cTokenAsteriskKeyword_0_10 = (Keyword)cTokenAlternatives_0.eContents().get(10);
		private final Keyword cTokenCommaKeyword_0_11 = (Keyword)cTokenAlternatives_0.eContents().get(11);
		private final Keyword cTokenNumberSignKeyword_0_12 = (Keyword)cTokenAlternatives_0.eContents().get(12);
		private final Keyword cTokenNumberSignNumberSignKeyword_0_13 = (Keyword)cTokenAlternatives_0.eContents().get(13);
		private final Keyword cTokenStringKeyword_0_14 = (Keyword)cTokenAlternatives_0.eContents().get(14);
		private final Keyword cTokenReverseKeyword_0_15 = (Keyword)cTokenAlternatives_0.eContents().get(15);
		private final Keyword cTokenMetaKeyword_0_16 = (Keyword)cTokenAlternatives_0.eContents().get(16);
		private final Keyword cTokenBufferKeyword_0_17 = (Keyword)cTokenAlternatives_0.eContents().get(17);
		private final Keyword cTokenTableKeyword_0_18 = (Keyword)cTokenAlternatives_0.eContents().get(18);
		private final Keyword cTokenHasKeyword_0_19 = (Keyword)cTokenAlternatives_0.eContents().get(19);
		private final Keyword cTokenHasntKeyword_0_20 = (Keyword)cTokenAlternatives_0.eContents().get(20);
		private final Keyword cTokenClassKeyword_0_21 = (Keyword)cTokenAlternatives_0.eContents().get(21);
		private final Keyword cTokenClassKeyword_0_22 = (Keyword)cTokenAlternatives_0.eContents().get(22);
		private final Keyword cTokenObjectKeyword_0_23 = (Keyword)cTokenAlternatives_0.eContents().get(23);
		private final Keyword cTokenLastKeyword_0_24 = (Keyword)cTokenAlternatives_0.eContents().get(24);
		private final Keyword cTokenMoveKeyword_0_25 = (Keyword)cTokenAlternatives_0.eContents().get(25);
		private final Keyword cTokenToKeyword_0_26 = (Keyword)cTokenAlternatives_0.eContents().get(26);
		private final Keyword cTokenInKeyword_0_27 = (Keyword)cTokenAlternatives_0.eContents().get(27);
		private final Keyword cTokenFirstKeyword_0_28 = (Keyword)cTokenAlternatives_0.eContents().get(28);
		private final Keyword cTokenPrintKeyword_0_29 = (Keyword)cTokenAlternatives_0.eContents().get(29);
		private final Keyword cTokenPrint_retKeyword_0_30 = (Keyword)cTokenAlternatives_0.eContents().get(30);
		private final Keyword cTokenSelfKeyword_0_31 = (Keyword)cTokenAlternatives_0.eContents().get(31);
		private final Keyword cTokenTrueKeyword_0_32 = (Keyword)cTokenAlternatives_0.eContents().get(32);
		private final Keyword cTokenFalseKeyword_0_33 = (Keyword)cTokenAlternatives_0.eContents().get(33);
		private final Keyword cTokenOnlyKeyword_0_34 = (Keyword)cTokenAlternatives_0.eContents().get(34);
		
		//UnparsedToken FunctionBody:
		//	token=(':' | '(' | ')' | '/' | '-' | '--' | '+' | '~' | '=' | '!' | '*' | ',' | '#' | '##'
		//	| 'string'
		//	| 'reverse'
		//	| 'meta'
		//	| 'buffer'
		//	| 'table'
		//	| 'has'
		//	| 'hasnt'
		//	| 'Class'
		//	| 'class'
		//	| 'Object'
		//	| 'last'
		//	| 'move'
		//	| 'to'
		//	| 'in'
		//	| 'first'
		//	| 'print'
		//	| 'print_ret'
		//	| 'self'
		//	| 'true'
		//	| 'false'
		//	| 'only');
		@Override public ParserRule getRule() { return rule; }
		
		//token=(':' | '(' | ')' | '/' | '-' | '--' | '+' | '~' | '=' | '!' | '*' | ',' | '#' | '##' | 'string' | 'reverse' |
		//'meta' | 'buffer' | 'table' | 'has' | 'hasnt' | 'Class' | 'class' | 'Object' | 'last' | 'move' | 'to' | 'in' | 'first'
		//| 'print' | 'print_ret' | 'self' | 'true' | 'false' | 'only')
		public Assignment getTokenAssignment() { return cTokenAssignment; }
		
		//(':' | '(' | ')' | '/' | '-' | '--' | '+' | '~' | '=' | '!' | '*' | ',' | '#' | '##' | 'string' | 'reverse' | 'meta' |
		//'buffer' | 'table' | 'has' | 'hasnt' | 'Class' | 'class' | 'Object' | 'last' | 'move' | 'to' | 'in' | 'first' | 'print'
		//| 'print_ret' | 'self' | 'true' | 'false' | 'only')
		public Alternatives getTokenAlternatives_0() { return cTokenAlternatives_0; }
		
		//':'
		public Keyword getTokenColonKeyword_0_0() { return cTokenColonKeyword_0_0; }
		
		//'('
		public Keyword getTokenLeftParenthesisKeyword_0_1() { return cTokenLeftParenthesisKeyword_0_1; }
		
		//')'
		public Keyword getTokenRightParenthesisKeyword_0_2() { return cTokenRightParenthesisKeyword_0_2; }
		
		//'/'
		public Keyword getTokenSolidusKeyword_0_3() { return cTokenSolidusKeyword_0_3; }
		
		//'-'
		public Keyword getTokenHyphenMinusKeyword_0_4() { return cTokenHyphenMinusKeyword_0_4; }
		
		//'--'
		public Keyword getTokenHyphenMinusHyphenMinusKeyword_0_5() { return cTokenHyphenMinusHyphenMinusKeyword_0_5; }
		
		//'+'
		public Keyword getTokenPlusSignKeyword_0_6() { return cTokenPlusSignKeyword_0_6; }
		
		//'~'
		public Keyword getTokenTildeKeyword_0_7() { return cTokenTildeKeyword_0_7; }
		
		//'='
		public Keyword getTokenEqualsSignKeyword_0_8() { return cTokenEqualsSignKeyword_0_8; }
		
		//'!'
		public Keyword getTokenExclamationMarkKeyword_0_9() { return cTokenExclamationMarkKeyword_0_9; }
		
		//'*'
		public Keyword getTokenAsteriskKeyword_0_10() { return cTokenAsteriskKeyword_0_10; }
		
		//','
		public Keyword getTokenCommaKeyword_0_11() { return cTokenCommaKeyword_0_11; }
		
		//'#'
		public Keyword getTokenNumberSignKeyword_0_12() { return cTokenNumberSignKeyword_0_12; }
		
		//'##'
		public Keyword getTokenNumberSignNumberSignKeyword_0_13() { return cTokenNumberSignNumberSignKeyword_0_13; }
		
		//'string'
		public Keyword getTokenStringKeyword_0_14() { return cTokenStringKeyword_0_14; }
		
		//'reverse'
		public Keyword getTokenReverseKeyword_0_15() { return cTokenReverseKeyword_0_15; }
		
		//'meta'
		public Keyword getTokenMetaKeyword_0_16() { return cTokenMetaKeyword_0_16; }
		
		//'buffer'
		public Keyword getTokenBufferKeyword_0_17() { return cTokenBufferKeyword_0_17; }
		
		//'table'
		public Keyword getTokenTableKeyword_0_18() { return cTokenTableKeyword_0_18; }
		
		//'has'
		public Keyword getTokenHasKeyword_0_19() { return cTokenHasKeyword_0_19; }
		
		//'hasnt'
		public Keyword getTokenHasntKeyword_0_20() { return cTokenHasntKeyword_0_20; }
		
		//'Class'
		public Keyword getTokenClassKeyword_0_21() { return cTokenClassKeyword_0_21; }
		
		//'class'
		public Keyword getTokenClassKeyword_0_22() { return cTokenClassKeyword_0_22; }
		
		//'Object'
		public Keyword getTokenObjectKeyword_0_23() { return cTokenObjectKeyword_0_23; }
		
		//'last'
		public Keyword getTokenLastKeyword_0_24() { return cTokenLastKeyword_0_24; }
		
		//'move'
		public Keyword getTokenMoveKeyword_0_25() { return cTokenMoveKeyword_0_25; }
		
		//'to'
		public Keyword getTokenToKeyword_0_26() { return cTokenToKeyword_0_26; }
		
		//'in'
		public Keyword getTokenInKeyword_0_27() { return cTokenInKeyword_0_27; }
		
		//'first'
		public Keyword getTokenFirstKeyword_0_28() { return cTokenFirstKeyword_0_28; }
		
		//'print'
		public Keyword getTokenPrintKeyword_0_29() { return cTokenPrintKeyword_0_29; }
		
		//'print_ret'
		public Keyword getTokenPrint_retKeyword_0_30() { return cTokenPrint_retKeyword_0_30; }
		
		//'self'
		public Keyword getTokenSelfKeyword_0_31() { return cTokenSelfKeyword_0_31; }
		
		//'true'
		public Keyword getTokenTrueKeyword_0_32() { return cTokenTrueKeyword_0_32; }
		
		//'false'
		public Keyword getTokenFalseKeyword_0_33() { return cTokenFalseKeyword_0_33; }
		
		//'only'
		public Keyword getTokenOnlyKeyword_0_34() { return cTokenOnlyKeyword_0_34; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimaryAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cStringAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cStringAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrimaryAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cDirectionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDirectionDIRECTIONSTerminalRuleCall_3_1_0 = (RuleCall)cDirectionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPrimaryAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cHexAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHexHEXTerminalRuleCall_4_1_0 = (RuleCall)cHexAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPrimaryAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cBinaryAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBinaryBINARYTerminalRuleCall_5_1_0 = (RuleCall)cBinaryAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cPrimaryAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cSelfKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cPrimaryAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cTrueKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cPrimaryAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cFalseKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Primary:
		//	{Primary} id=ID
		//	| number=Number
		//	| {Primary} string=STRING
		//	| {Primary} direction=DIRECTIONS
		//	| {Primary} hex=HEX
		//	| {Primary} binary=BINARY
		//	| {Primary} 'self'
		//	| {Primary} 'true'
		//	| {Primary} 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//{Primary} id=ID | number=Number | {Primary} string=STRING | {Primary} direction=DIRECTIONS | {Primary} hex=HEX |
		//{Primary} binary=BINARY | {Primary} 'self' | {Primary} 'true' | {Primary} 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Primary} id=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Primary}
		public Action getPrimaryAction_0_0() { return cPrimaryAction_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_1_0() { return cIdIDTerminalRuleCall_0_1_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//{Primary} string=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{Primary}
		public Action getPrimaryAction_2_0() { return cPrimaryAction_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2_1() { return cStringAssignment_2_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_1_0() { return cStringSTRINGTerminalRuleCall_2_1_0; }
		
		//{Primary} direction=DIRECTIONS
		public Group getGroup_3() { return cGroup_3; }
		
		//{Primary}
		public Action getPrimaryAction_3_0() { return cPrimaryAction_3_0; }
		
		//direction=DIRECTIONS
		public Assignment getDirectionAssignment_3_1() { return cDirectionAssignment_3_1; }
		
		//DIRECTIONS
		public RuleCall getDirectionDIRECTIONSTerminalRuleCall_3_1_0() { return cDirectionDIRECTIONSTerminalRuleCall_3_1_0; }
		
		//{Primary} hex=HEX
		public Group getGroup_4() { return cGroup_4; }
		
		//{Primary}
		public Action getPrimaryAction_4_0() { return cPrimaryAction_4_0; }
		
		//hex=HEX
		public Assignment getHexAssignment_4_1() { return cHexAssignment_4_1; }
		
		//HEX
		public RuleCall getHexHEXTerminalRuleCall_4_1_0() { return cHexHEXTerminalRuleCall_4_1_0; }
		
		//{Primary} binary=BINARY
		public Group getGroup_5() { return cGroup_5; }
		
		//{Primary}
		public Action getPrimaryAction_5_0() { return cPrimaryAction_5_0; }
		
		//binary=BINARY
		public Assignment getBinaryAssignment_5_1() { return cBinaryAssignment_5_1; }
		
		//BINARY
		public RuleCall getBinaryBINARYTerminalRuleCall_5_1_0() { return cBinaryBINARYTerminalRuleCall_5_1_0; }
		
		//{Primary} 'self'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Primary}
		public Action getPrimaryAction_6_0() { return cPrimaryAction_6_0; }
		
		//'self'
		public Keyword getSelfKeyword_6_1() { return cSelfKeyword_6_1; }
		
		//{Primary} 'true'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Primary}
		public Action getPrimaryAction_7_0() { return cPrimaryAction_7_0; }
		
		//'true'
		public Keyword getTrueKeyword_7_1() { return cTrueKeyword_7_1; }
		
		//{Primary} 'false'
		public Group getGroup_8() { return cGroup_8; }
		
		//{Primary}
		public Action getPrimaryAction_8_0() { return cPrimaryAction_8_0; }
		
		//'false'
		public Keyword getFalseKeyword_8_1() { return cFalseKeyword_8_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNegativeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Number:
		//	{Number} negative='-'? value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number} negative='-'? value=INT
		public Group getGroup() { return cGroup; }
		
		//{Number}
		public Action getNumberAction_0() { return cNumberAction_0; }
		
		//negative='-'?
		public Assignment getNegativeAssignment_1() { return cNegativeAssignment_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameAttributeDeclarationCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameAttributeDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cNameAttributeDeclarationCrossReference_2_0.eContents().get(1);
		
		//Attribute:
		//	{Attribute} '~'? name=[AttributeDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} '~'? name=[AttributeDeclaration]
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//'~'?
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//name=[AttributeDeclaration]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//[AttributeDeclaration]
		public CrossReference getNameAttributeDeclarationCrossReference_2_0() { return cNameAttributeDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getNameAttributeDeclarationIDTerminalRuleCall_2_0_1() { return cNameAttributeDeclarationIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final DirectiveElements pDirective;
	private final SystemFileDirectiveElements pSystemFileDirective;
	private final FakeActionDirectiveElements pFakeActionDirective;
	private final MessageDirectiveElements pMessageDirective;
	private final ZcharacterDirectiveElements pZcharacterDirective;
	private final CommentDeclarationElements pCommentDeclaration;
	private final CompilerDirectiveElements pCompilerDirective;
	private final IncludeDeclarationElements pIncludeDeclaration;
	private final EndDirectiveElements pEndDirective;
	private final PropertyDirectiveElements pPropertyDirective;
	private final LowStringDirectiveElements pLowStringDirective;
	private final ReleaseDirectiveElements pReleaseDirective;
	private final ReplaceDirectiveElements pReplaceDirective;
	private final SerialDirectiveElements pSerialDirective;
	private final GlobalConstantDeclarationElements pGlobalConstantDeclaration;
	private final GlobalDefaultDeclarationElements pGlobalDefaultDeclaration;
	private final SwitchesDeclarationElements pSwitchesDeclaration;
	private final GlobalDeclarationElements pGlobalDeclaration;
	private final GlobalConstantValueElements pGlobalConstantValue;
	private final AttributeDeclarationElements pAttributeDeclaration;
	private final PropertyDeclarationElements pPropertyDeclaration;
	private final ClassDeclarationElements pClassDeclaration;
	private final ObjectDeclarationElements pObjectDeclaration;
	private final IdlessObjectDeclarationElements pIdlessObjectDeclaration;
	private final NearbyDeclarationElements pNearbyDeclaration;
	private final VerbDeclarationElements pVerbDeclaration;
	private final VerbBodyElements pVerbBody;
	private final VerbAssignmentElements pVerbAssignment;
	private final ArrayDeclarationElements pArrayDeclaration;
	private final ArrayTypeElements pArrayType;
	private final ClassSectionElements pClassSection;
	private final PropertySectionElements pPropertySection;
	private final AttributeSectionElements pAttributeSection;
	private final PropertyElements pProperty;
	private final AbstractArrayElements pAbstractArray;
	private final MethodElements pMethod;
	private final GlobalFunctionDefinitionElements pGlobalFunctionDefinition;
	private final FunctionBodyElements pFunctionBody;
	private final FunctionHeaderElements pFunctionHeader;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ExpressionElements pExpression;
	private final AnyTokenElements pAnyToken;
	private final UnparsedTokenElements pUnparsedToken;
	private final PrimaryElements pPrimary;
	private final NumberElements pNumber;
	private final AttributeElements pAttribute;
	private final TerminalRule tBYTE_ARROW;
	private final TerminalRule tWORD_ARROW;
	private final TerminalRule tDIRECTIONS;
	private final TerminalRule tINT;
	private final TerminalRule tHEX;
	private final TerminalRule tBINARY;
	private final TerminalRule tCOMPILER_DIRECTIVE_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tPREPROCESSORDIR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Inform6GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDirective = new DirectiveElements();
		this.pSystemFileDirective = new SystemFileDirectiveElements();
		this.pFakeActionDirective = new FakeActionDirectiveElements();
		this.pMessageDirective = new MessageDirectiveElements();
		this.pZcharacterDirective = new ZcharacterDirectiveElements();
		this.pCommentDeclaration = new CommentDeclarationElements();
		this.pCompilerDirective = new CompilerDirectiveElements();
		this.pIncludeDeclaration = new IncludeDeclarationElements();
		this.pEndDirective = new EndDirectiveElements();
		this.pPropertyDirective = new PropertyDirectiveElements();
		this.pLowStringDirective = new LowStringDirectiveElements();
		this.pReleaseDirective = new ReleaseDirectiveElements();
		this.pReplaceDirective = new ReplaceDirectiveElements();
		this.pSerialDirective = new SerialDirectiveElements();
		this.pGlobalConstantDeclaration = new GlobalConstantDeclarationElements();
		this.pGlobalDefaultDeclaration = new GlobalDefaultDeclarationElements();
		this.pSwitchesDeclaration = new SwitchesDeclarationElements();
		this.pGlobalDeclaration = new GlobalDeclarationElements();
		this.pGlobalConstantValue = new GlobalConstantValueElements();
		this.pAttributeDeclaration = new AttributeDeclarationElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pObjectDeclaration = new ObjectDeclarationElements();
		this.pIdlessObjectDeclaration = new IdlessObjectDeclarationElements();
		this.pNearbyDeclaration = new NearbyDeclarationElements();
		this.pVerbDeclaration = new VerbDeclarationElements();
		this.pVerbBody = new VerbBodyElements();
		this.pVerbAssignment = new VerbAssignmentElements();
		this.pArrayDeclaration = new ArrayDeclarationElements();
		this.pArrayType = new ArrayTypeElements();
		this.pClassSection = new ClassSectionElements();
		this.pPropertySection = new PropertySectionElements();
		this.pAttributeSection = new AttributeSectionElements();
		this.pProperty = new PropertyElements();
		this.pAbstractArray = new AbstractArrayElements();
		this.pMethod = new MethodElements();
		this.pGlobalFunctionDefinition = new GlobalFunctionDefinitionElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pFunctionHeader = new FunctionHeaderElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pAnyToken = new AnyTokenElements();
		this.pUnparsedToken = new UnparsedTokenElements();
		this.pPrimary = new PrimaryElements();
		this.pNumber = new NumberElements();
		this.pAttribute = new AttributeElements();
		this.tBYTE_ARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.BYTE_ARROW");
		this.tWORD_ARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.WORD_ARROW");
		this.tDIRECTIONS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.DIRECTIONS");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.INT");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.HEX");
		this.tBINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.BINARY");
		this.tCOMPILER_DIRECTIVE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.COMPILER_DIRECTIVE_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.STRING");
		this.tPREPROCESSORDIR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.github.toerob.Inform6.PREPROCESSORDIR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.github.toerob.Inform6".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	//Inform 6 grammar for Xtext lexer and parser generation for use with the 
	//Language Server Protocol (LSP) as a code assister within various of editors
	//
	// 
	//The MIT License (MIT)
	//
	//Copyright (c) 2020 Tomas Ã–berg
	//
	//Permission is hereby granted, free of charge, to any person obtaining a copy
	//of this software and associated documentation files (the "Software"), to deal
	//in the Software without restriction, including without limitation the rights
	//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	//copies of the Software, and to permit persons to whom the Software is
	//furnished to do so, subject to the following conditions:
	//
	//The above copyright notice and this permission notice shall be included in
	//all copies or substantial portions of the Software.
	//
	//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	//THE SOFTWARE. 
	// */ Program:
	//	(directives+=Directive | imports+=IncludeDeclaration)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	////=============================================================
	//// D I R E C T I V E S 
	////=============================================================
	//Directive:
	//	ReleaseDirective
	//	| ZcharacterDirective
	//	| CommentDeclaration
	//	| ReplaceDirective
	//	| SerialDirective
	//	| SwitchesDeclaration
	//	| GlobalDeclaration
	//	| GlobalDefaultDeclaration
	//	| GlobalConstantDeclaration
	//	| GlobalFunctionDefinition
	//	| AttributeDeclaration
	//	| PropertyDeclaration
	//	| ClassDeclaration
	//	| ObjectDeclaration
	//	| IdlessObjectDeclaration
	//	| NearbyDeclaration
	//	| VerbDeclaration
	//	| ArrayDeclaration
	//	| PropertyDirective
	//	| MessageDirective
	//	| {Directive} EndDirective
	//	| {Directive} LowStringDirective
	//	| {Directive} PREPROCESSORDIR
	//	| {Directive} FakeActionDirective
	//	| {Directive} SystemFileDirective;
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	//SystemFileDirective:
	//	'System_file' ';';
	public SystemFileDirectiveElements getSystemFileDirectiveAccess() {
		return pSystemFileDirective;
	}
	
	public ParserRule getSystemFileDirectiveRule() {
		return getSystemFileDirectiveAccess().getRule();
	}
	
	//FakeActionDirective:
	//	'Fake_Action' ID ';';
	public FakeActionDirectiveElements getFakeActionDirectiveAccess() {
		return pFakeActionDirective;
	}
	
	public ParserRule getFakeActionDirectiveRule() {
		return getFakeActionDirectiveAccess().getRule();
	}
	
	//MessageDirective:
	//	'Message' name=ID? string=STRING ';';
	public MessageDirectiveElements getMessageDirectiveAccess() {
		return pMessageDirective;
	}
	
	public ParserRule getMessageDirectiveRule() {
		return getMessageDirectiveAccess().getRule();
	}
	
	//ZcharacterDirective:
	//	'Zcharacter' string=STRING ';';
	public ZcharacterDirectiveElements getZcharacterDirectiveAccess() {
		return pZcharacterDirective;
	}
	
	public ParserRule getZcharacterDirectiveRule() {
		return getZcharacterDirectiveAccess().getRule();
	}
	
	//CommentDeclaration:
	//	CompilerDirective
	//	| {CommentDeclaration} SL_COMMENT;
	public CommentDeclarationElements getCommentDeclarationAccess() {
		return pCommentDeclaration;
	}
	
	public ParserRule getCommentDeclarationRule() {
		return getCommentDeclarationAccess().getRule();
	}
	
	//CompilerDirective:
	//	value=COMPILER_DIRECTIVE_COMMENT;
	public CompilerDirectiveElements getCompilerDirectiveAccess() {
		return pCompilerDirective;
	}
	
	public ParserRule getCompilerDirectiveRule() {
		return getCompilerDirectiveAccess().getRule();
	}
	
	//IncludeDeclaration:
	//	('Include' | 'Link') importURI=STRING ';';
	public IncludeDeclarationElements getIncludeDeclarationAccess() {
		return pIncludeDeclaration;
	}
	
	public ParserRule getIncludeDeclarationRule() {
		return getIncludeDeclarationAccess().getRule();
	}
	
	//EndDirective:
	//	"End" ';';
	public EndDirectiveElements getEndDirectiveAccess() {
		return pEndDirective;
	}
	
	public ParserRule getEndDirectiveRule() {
		return getEndDirectiveAccess().getRule();
	}
	
	////FIXME: DIRECTIONS should be able to cross reference the same way as attributes
	//PropertyDirective:
	//	"Property" additive='additive'? name=(ID | DIRECTIONS | 'found_in') value=ID? ';';
	public PropertyDirectiveElements getPropertyDirectiveAccess() {
		return pPropertyDirective;
	}
	
	public ParserRule getPropertyDirectiveRule() {
		return getPropertyDirectiveAccess().getRule();
	}
	
	//LowStringDirective:
	//	"Lowstring" ID STRING ";";
	public LowStringDirectiveElements getLowStringDirectiveAccess() {
		return pLowStringDirective;
	}
	
	public ParserRule getLowStringDirectiveRule() {
		return getLowStringDirectiveAccess().getRule();
	}
	
	//ReleaseDirective:
	//	name="Release" version=INT ';';
	public ReleaseDirectiveElements getReleaseDirectiveAccess() {
		return pReleaseDirective;
	}
	
	public ParserRule getReleaseDirectiveRule() {
		return getReleaseDirectiveAccess().getRule();
	}
	
	//ReplaceDirective:
	//	name="Replace" id=ID ';';
	public ReplaceDirectiveElements getReplaceDirectiveAccess() {
		return pReplaceDirective;
	}
	
	public ParserRule getReplaceDirectiveRule() {
		return getReplaceDirectiveAccess().getRule();
	}
	
	//SerialDirective:
	//	name="Serial" serial=STRING ';';
	public SerialDirectiveElements getSerialDirectiveAccess() {
		return pSerialDirective;
	}
	
	public ParserRule getSerialDirectiveRule() {
		return getSerialDirectiveAccess().getRule();
	}
	
	//GlobalConstantDeclaration:
	//	'Constant' name=ID '='? value=GlobalConstantValue? ';';
	public GlobalConstantDeclarationElements getGlobalConstantDeclarationAccess() {
		return pGlobalConstantDeclaration;
	}
	
	public ParserRule getGlobalConstantDeclarationRule() {
		return getGlobalConstantDeclarationAccess().getRule();
	}
	
	//GlobalDefaultDeclaration:
	//	'Default' name=ID '='? value=GlobalConstantValue? ';';
	public GlobalDefaultDeclarationElements getGlobalDefaultDeclarationAccess() {
		return pGlobalDefaultDeclaration;
	}
	
	public ParserRule getGlobalDefaultDeclarationRule() {
		return getGlobalDefaultDeclarationAccess().getRule();
	}
	
	//SwitchesDeclaration:
	//	name='Switches' switches+=Primary* ';';
	public SwitchesDeclarationElements getSwitchesDeclarationAccess() {
		return pSwitchesDeclaration;
	}
	
	public ParserRule getSwitchesDeclarationRule() {
		return getSwitchesDeclarationAccess().getRule();
	}
	
	////FIXME:Â 'meta' here should be a global declaration, and instead used as a [GlobalDeclaration]
	//// in the grammar instead of a keyword.
	//GlobalDeclaration:
	//	'Global' name=(ID | 'meta') ('=' value=Primary)? ';';
	public GlobalDeclarationElements getGlobalDeclarationAccess() {
		return pGlobalDeclaration;
	}
	
	public ParserRule getGlobalDeclarationRule() {
		return getGlobalDeclarationAccess().getRule();
	}
	
	//GlobalConstantValue:
	//	name=Primary;
	public GlobalConstantValueElements getGlobalConstantValueAccess() {
		return pGlobalConstantValue;
	}
	
	public ParserRule getGlobalConstantValueRule() {
		return getGlobalConstantValueAccess().getRule();
	}
	
	//AttributeDeclaration:
	//	'Attribute' name=ID ';';
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return pAttributeDeclaration;
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}
	
	//PropertyDeclaration:
	//	'Property' name=ID value=Primary ';';
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}
	
	//ClassDeclaration:
	//	{ClassDeclaration} ('Class' | 'class') name=ID (cardinality='(' max=Primary ')')?
	//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
	//	AttributeSection))*
	//	';';
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//ObjectDeclaration:
	//	({ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=ID headline=STRING?
	//	in=[ObjectDeclaration]?
	//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
	//	AttributeSection))*)
	//	';';
	public ObjectDeclarationElements getObjectDeclarationAccess() {
		return pObjectDeclaration;
	}
	
	public ParserRule getObjectDeclarationRule() {
		return getObjectDeclarationAccess().getRule();
	}
	
	//IdlessObjectDeclaration:
	//	{ObjectDeclaration} (object='Object' | superType=[ClassDeclaration]) level+=BYTE_ARROW* name=STRING?
	//	in=[ObjectDeclaration]?
	//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
	//	AttributeSection))*
	//	';';
	public IdlessObjectDeclarationElements getIdlessObjectDeclarationAccess() {
		return pIdlessObjectDeclaration;
	}
	
	public ParserRule getIdlessObjectDeclarationRule() {
		return getIdlessObjectDeclarationAccess().getRule();
	}
	
	//NearbyDeclaration:
	//	{ObjectDeclaration} 'Nearby' name=ID? headline=STRING in=[ObjectDeclaration]?
	//	properties+=(ClassSection | PropertySection | AttributeSection)? (','? properties+=(ClassSection | PropertySection |
	//	AttributeSection))*
	//	';';
	public NearbyDeclarationElements getNearbyDeclarationAccess() {
		return pNearbyDeclaration;
	}
	
	public ParserRule getNearbyDeclarationRule() {
		return getNearbyDeclarationAccess().getRule();
	}
	
	//VerbDeclaration:
	//	{VerbDeclaration} name='Verb' ^meta='meta'? syn+=STRING* defintions+=VerbBody* ';'
	//	| {VerbDeclaration} name='Extend' only='only'? syn+=STRING* ('first' | 'last')? defintions+=VerbBody* ';';
	public VerbDeclarationElements getVerbDeclarationAccess() {
		return pVerbDeclaration;
	}
	
	public ParserRule getVerbDeclarationRule() {
		return getVerbDeclarationAccess().getRule();
	}
	
	//VerbBody:
	//	'*' definitions+=VerbAssignment* BYTE_ARROW name=ID reverse='reverse'?;
	public VerbBodyElements getVerbBodyAccess() {
		return pVerbBody;
	}
	
	public ParserRule getVerbBodyRule() {
		return getVerbBodyAccess().getRule();
	}
	
	//VerbAssignment:
	//	Primary
	//	| ID '=' Primary
	//	| {VerbAssignment} STRING ('/' STRING)+;
	public VerbAssignmentElements getVerbAssignmentAccess() {
		return pVerbAssignment;
	}
	
	public ParserRule getVerbAssignmentRule() {
		return getVerbAssignmentAccess().getRule();
	}
	
	//ArrayDeclaration:
	//	'Array' name=(ID | 'buffer') arrayBody=ArrayType
	//	';';
	public ArrayDeclarationElements getArrayDeclarationAccess() {
		return pArrayDeclaration;
	}
	
	public ParserRule getArrayDeclarationRule() {
		return getArrayDeclarationAccess().getRule();
	}
	
	//// TODO: See Swedish.h, arrays need to be further refined
	//ArrayType:
	//	{BYTE_ARRAY} type=BYTE_ARROW content+=PrimaryExpression*
	//	| {WORD_ARRAY} type=WORD_ARROW content+=PrimaryExpression*
	//	| {TABLE_ARRAY} type=('table' | 'buffer') size=Primary? content+=Primary*
	//	| {STRING_ARRAY} type='string' size=Primary? content+=STRING?;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//ClassSection:
	//	{PropertySection} name='class' classProperty=Property;
	public ClassSectionElements getClassSectionAccess() {
		return pClassSection;
	}
	
	public ParserRule getClassSectionRule() {
		return getClassSectionAccess().getRule();
	}
	
	//PropertySection:
	//	({PropertySection} name=('with' | 'private') properties+=Property? (',' properties+=Property)*
	//	| {PropertySection} PREPROCESSORDIR) ','?;
	public PropertySectionElements getPropertySectionAccess() {
		return pPropertySection;
	}
	
	public ParserRule getPropertySectionRule() {
		return getPropertySectionAccess().getRule();
	}
	
	//AttributeSection:
	//	{AttributeSection} name='has' attributes+=Attribute attributes+=Attribute*;
	public AttributeSectionElements getAttributeSectionAccess() {
		return pAttributeSection;
	}
	
	public ParserRule getAttributeSectionRule() {
		return getAttributeSectionAccess().getRule();
	}
	
	////FIXME: DIRECTIONS here should be able to cross reference the same way as attributes, 
	//// so it should be removed and be replaced with something either as [PropertyDirective|ID] or
	//// ID if not declared before
	////FIXME: remove found_in and replace with a more general approach
	//Property:
	//	{Property} name=ID object=[ObjectDeclaration] | {Property} name=ID (method=Method | array=AbstractArray) | {Property}
	//	name=DIRECTIONS (objectReference=[ObjectDeclaration] | value=Primary
	//	| method=Method
	//	| array=AbstractArray) | {Property} 'found_in' (objectReferences+=[ObjectDeclaration]*
	//	| method=Method
	//	| value=Primary) name=ID val=Primary;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//AbstractArray:
	//	{AbstractArray} (array+=Primary? array+=Primary*);
	public AbstractArrayElements getAbstractArrayAccess() {
		return pAbstractArray;
	}
	
	public ParserRule getAbstractArrayRule() {
		return getAbstractArrayAccess().getRule();
	}
	
	//Method AbstractProperty:
	//	'[' functionBody=FunctionBody ']';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//GlobalFunctionDefinition:
	//	'['
	//	functionHeader=FunctionHeader?
	//	functionBody=FunctionBody
	//	']'
	//	';';
	public GlobalFunctionDefinitionElements getGlobalFunctionDefinitionAccess() {
		return pGlobalFunctionDefinition;
	}
	
	public ParserRule getGlobalFunctionDefinitionRule() {
		return getGlobalFunctionDefinitionAccess().getRule();
	}
	
	//FunctionBody Expression:
	//	{Expression} expressions+=Expression*;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//FunctionHeader:
	//	{FunctionHeader} variables+=ID* ';';
	public FunctionHeaderElements getFunctionHeaderAccess() {
		return pFunctionHeader;
	}
	
	public ParserRule getFunctionHeaderRule() {
		return getFunctionHeaderAccess().getRule();
	}
	
	///* 
	//ReturnStatement:
	//	('return' (rvalueObj=[ObjectDeclaration|ID]|rvalue=Primary))
	//	|rboolean='rtrue'
	//	|rboolean='rfalse' 
	//	';'
	//;
	//
	//PrintStatement returns Expression:
	//	{Expression} ('print'|'print_ret')? text=STRING ';'
	//;
	//
	//HasHasntStatement:
	//	('has'|'hasnt') attribute=[AttributeDeclaration|ID]
	//;
	//
	//InStatement:
	//	( first=([ObjectDeclaration|ID]) 'in' second=([ObjectDeclaration|ID]) )
	//	| firstID=Primary 'in' secondID=Primary
	//;
	//
	//NotInStatement:
	//	( first=([ObjectDeclaration|ID]) 'notin' second=([ObjectDeclaration|ID]) )
	//	| firstID=Primary 'notin' secondID=Primary
	//;
	//
	//PlayerToStatement returns FunctionBody:
	//	'PlayerTo' '(' (location=[ObjectDeclaration|ID]|primary=Primary) ')' ';'
	//;
	//
	//GiveStatement returns FunctionBody:
	//	'give' (first=[ObjectDeclaration|ID]|expr=Expression)  attribute=[AttributeDeclaration|ID] ';'
	//;
	//
	//MoveStatement returns FunctionBody:
	//	{FunctionBody} 'move' object1=[ObjectDeclaration|ID] 'to' object2=[ObjectDeclaration|ID] ';'
	//;*/ // NOTE: Just enough to make statements such as
	//// PARSE_BUFFER_LEN/WORDSIZE pass. Needs to be handled recursively
	//PrimaryExpression:
	//	left=Primary ('/' | '*' | '+' | '-') right=Primary
	//	| '(' left=Primary ')'
	//	| left=Primary ('(' params+=Expression* ')')?;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	///* Encapsulates all possibly combinations into one abstract function body 
	// * TODO: this should be broken up into real expression and statements, so real 
	// * analysis can be made
	// */ Expression FunctionBody:
	//	(anyToken=AnyToken | semicolon=';') ';'?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	///* Any token besides ';' */ AnyToken:
	//	{FunctionBody} (unparsed=UnparsedToken | ANY_OTHER | STRING | INT | ID | ML_COMMENT | SL_COMMENT | WS
	//	| PREPROCESSORDIR
	//	| BYTE_ARROW
	//	| WORD_ARROW
	//	| DIRECTIONS
	//	| HEX
	//	| BINARY);
	public AnyTokenElements getAnyTokenAccess() {
		return pAnyToken;
	}
	
	public ParserRule getAnyTokenRule() {
		return getAnyTokenAccess().getRule();
	}
	
	//UnparsedToken FunctionBody:
	//	token=(':' | '(' | ')' | '/' | '-' | '--' | '+' | '~' | '=' | '!' | '*' | ',' | '#' | '##'
	//	| 'string'
	//	| 'reverse'
	//	| 'meta'
	//	| 'buffer'
	//	| 'table'
	//	| 'has'
	//	| 'hasnt'
	//	| 'Class'
	//	| 'class'
	//	| 'Object'
	//	| 'last'
	//	| 'move'
	//	| 'to'
	//	| 'in'
	//	| 'first'
	//	| 'print'
	//	| 'print_ret'
	//	| 'self'
	//	| 'true'
	//	| 'false'
	//	| 'only');
	public UnparsedTokenElements getUnparsedTokenAccess() {
		return pUnparsedToken;
	}
	
	public ParserRule getUnparsedTokenRule() {
		return getUnparsedTokenAccess().getRule();
	}
	
	//Primary:
	//	{Primary} id=ID
	//	| number=Number
	//	| {Primary} string=STRING
	//	| {Primary} direction=DIRECTIONS
	//	| {Primary} hex=HEX
	//	| {Primary} binary=BINARY
	//	| {Primary} 'self'
	//	| {Primary} 'true'
	//	| {Primary} 'false';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Number:
	//	{Number} negative='-'? value=INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} '~'? name=[AttributeDeclaration];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal BYTE_ARROW:
	//	'->';
	public TerminalRule getBYTE_ARROWRule() {
		return tBYTE_ARROW;
	}
	
	//terminal WORD_ARROW:
	//	'-->';
	public TerminalRule getWORD_ARROWRule() {
		return tWORD_ARROW;
	}
	
	//terminal DIRECTIONS:
	//	'e_to' | 'w_to' | 'n_to' | 's_to' | 'u_to' | 'd_to' | 'se_to' | 'sw_to' | 'nw_to' | 'ne_to' | 'in_to' | 'out_to';
	public TerminalRule getDIRECTIONSRule() {
		return tDIRECTIONS;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'0'..'9'* ('.' '0'..'9'+)?;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal HEX:
	//	'$' ('0'..'9' | 'a'..'f' | 'A'..'F')*;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal BINARY:
	//	'$' '$' ('0' | '1')*;
	public TerminalRule getBINARYRule() {
		return tBINARY;
	}
	
	//terminal COMPILER_DIRECTIVE_COMMENT:
	//	'!' '%' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMPILER_DIRECTIVE_COMMENTRule() {
		return tCOMPILER_DIRECTIVE_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'!' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal PREPROCESSORDIR:
	//	'#'
	//	ID // Catch all else with this, in case it gets mixed up with addresses 
	//	!';'* ';';
	public TerminalRule getPREPROCESSORDIRRule() {
		return tPREPROCESSORDIR;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
