/*
 * generated by Xtext 2.22.0
 */
package com.github.toerob.ui.labeling;

import java.lang.reflect.Method;
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.github.toerob.inform6.AbstractArray;
import com.github.toerob.inform6.AbstractProperty;
import com.github.toerob.inform6.ArrayDeclaration;
import com.github.toerob.inform6.ArrayType;
import com.github.toerob.inform6.AttributeDeclaration;
import com.github.toerob.inform6.AttributeSection;
import com.github.toerob.inform6.BYTE_ARRAY;
import com.github.toerob.inform6.ClassDeclaration;
import com.github.toerob.inform6.ClassSection;
import com.github.toerob.inform6.GlobalConstantDeclaration;
import com.github.toerob.inform6.GlobalConstantValue;
import com.github.toerob.inform6.GlobalDeclaration;
import com.github.toerob.inform6.GlobalFunctionDefinition;
import com.github.toerob.inform6.IdlessObjectDeclaration;
import com.github.toerob.inform6.IncludeDeclaration;
import com.github.toerob.inform6.NearbyDeclaration;
import com.github.toerob.inform6.ObjectDeclaration;
import com.github.toerob.inform6.Primary;
import com.github.toerob.inform6.Property;
import com.github.toerob.inform6.PropertyDeclaration;
import com.github.toerob.inform6.PropertySection;
import com.github.toerob.inform6.ReleaseDirective;
import com.github.toerob.inform6.ReplaceDirective;
import com.github.toerob.inform6.SerialDirective;
import com.github.toerob.inform6.SwitchesDeclaration;
import com.github.toerob.inform6.VerbDeclaration;
import com.github.toerob.inform6.WORD_ARRAY;
import com.google.inject.Inject;

/**
 * Provides labels for EObjects.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class Inform6LabelProvider extends DefaultEObjectLabelProvider {

	private static final String GLOBAL_FUNCTION_STR = "Global function";

	@Inject
	public Inform6LabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public String text(VerbDeclaration ele) {
		if (ele.getSyn().size() > 0) {
			return ele.getSyn().get(0) + ": Verb";
		}
		return "Verb";
	}

	public String text(SwitchesDeclaration ele) {
		return "Switches: " + ele.getName();
	}

	public String text(GlobalConstantDeclaration ele) {
		return "Global: " + ele.getName().trim();
	}

	public String text(GlobalConstantValue ele) {
		if (ele.getName() != null) {
			return extractPrimaryAsString(ele.getName());
		}
		return "(No value)";
	}

	private String extractPrimaryAsString(Primary name) {
		if (name.getId() != null) {
			return name.getId();
		} else if (name.getString() != null) {
			return name.getString();
		} else if (name.getNumber() != null) {
			if (name.getNumber().getNegative() != null) {
				return "-" + name.getNumber().getValue();
			} else
				return Integer.toString(name.getNumber().getValue());
		} else if (name.getDirection() != null) {
			return name.getDirection().toString();
		/*} else if (name.getAttribute() != null) {
			return name.getAttribute();*/
		}
		return null;
	}

	
	public String text(ArrayType element) {
		if ("->".equals(element.getType()) || "-->".equals(element.getType())) {
			EList<EObject> eContents = element.eContents();
			String collect = eContents.stream().map(x -> extractPrimaryAsString((Primary) (x)))
					.collect(Collectors.joining(" "));
			return collect;
		}
		return element.getType();
	}
	
	public String text(GlobalDeclaration ele) {
		return "Global " + ele.getName() + ": " + extractPrimaryAsString(ele.getValue());
	}
	public String text(SerialDirective ele) {
		return "Serial: " + ele.getSerial();
	}
	public String text(ReleaseDirective ele) {
		return "Release: " + ele.getVersion();
	}

	public String text(PropertyDeclaration ele) {
		return "Property: " + ele.getName().trim();
	}

	public String text(AttributeDeclaration ele) {
		return "Attribute: " + ele.getName().trim();
	}

	public String text(ClassDeclaration ele) {
		return ele.getName().trim() + ": Object";
	}

	public String text(ObjectDeclaration ele) {
		return ele.getName().trim() + ": Object";
	}

	public String text(PropertySection ele) {
		return "Properties";
	}
	
	public String text(AttributeSection ele) {
		return "Attributes: " + ele.getAttributes().stream().map(x->x.getName().getName()).collect(Collectors.joining(", "));
	}

	public String text(ClassSection ele) {
		return "Superclasses";
	}

	public String text(GlobalFunctionDefinition ele) {
		if (!ele.getFunctionHeader().getVariables().isEmpty()) {
			String functionName = ele.getFunctionHeader().getVariables().get(0);
			int size = ele.getFunctionHeader().getVariables().size();
			if (size > 1) {
				List<String> variableList = ele.getFunctionHeader().getVariables().subList(1, size);
				String variables = variableList.stream().collect(Collectors.joining(", "));
				return functionName + "(" + variables + ") ( " + GLOBAL_FUNCTION_STR + ")";
			}
			return functionName + "( " + GLOBAL_FUNCTION_STR + ")";
		}
		return GLOBAL_FUNCTION_STR;
	}

	// Constant, globals, attributes and imports
	public String image(GlobalConstantDeclaration ele) {
		return "envvar_obj.png";
	}

	public String image(GlobalDeclaration ele) {
		return "envvar_obj.png";
	}

	public String image(ReleaseDirective ele) {
		return "envvar_obj.png";
	}

	public String image(SerialDirective ele) {
		return "envvar_obj.png";
	}

	public String image(ReplaceDirective ele) {
		return "envvar_obj.png";
	}

	public String image(IncludeDeclaration ele) {
		return "envvar_obj.png";
	}

	public String image(SwitchesDeclaration ele) {
		return "envvar_obj.png";
	}

	public String image(AttributeDeclaration ele) {
		return "envvar_obj.png";
	}

	public String image(PropertyDeclaration ele) {
		return "envvar_obj.png";
	}

	// Classes and object level
	public String image(ClassDeclaration ele) {
		return "class_obj.png";
	}

	public String image(ObjectDeclaration ele) {
		return "class_obj.png";
	}

	public String image(NearbyDeclaration ele) {
		return "class_obj.png";
	}

	public String image(IdlessObjectDeclaration ele) {
		return "class_obj.png";
	}

	// Properties
	public String image(AbstractProperty ele) {
		return "field_public_obj.png";
	}

	public String image(PropertySection ele) {
		return "code_assist_circle.png";
	}

	public String image(Property ele) {
		return "field_private_obj.png";
	}

	public String image(AttributeSection ele) {
		return "code_assist_circle.png";
	}

	public String image(ClassSection ele) {
		return "code_assist_circle.png";
	}

	public String image(ArrayDeclaration ele) {
		return "methpub_obj.png";
	}

	public String image(WORD_ARRAY ele) {
		return "field_public_obj.png";
	}

	public String image(BYTE_ARRAY ele) {
		return "field_private_obj.png";
	}

	public String image(Method ele) {
		return "methpub_obj.png";
	}

	// Globals, verbs etc...
	public String image(GlobalFunctionDefinition ele) {
		return "code_assist_circle.png";
	}

	public String image(VerbDeclaration ele) {
		return "code_assist_circle.png";
	}

	

	String text(AbstractArray ele) {
		if (!ele.getArray().isEmpty()) {
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.append(ele.getArray().stream().filter(x -> x.getString() != null).map(x -> x.getString())
					.collect(Collectors.joining(", ")));
			stringBuilder.append(ele.getArray().stream().filter(x -> x.getNumber() != null).map(this::extractNumber)
					.collect(Collectors.joining(", ")));
			stringBuilder.append(ele.getArray().stream().filter(x -> x.getId() != null).map(x -> x.getId().toString())
					.collect(Collectors.joining(", ")));
			return stringBuilder.toString();

		}
		return null;
	}

	private String extractNumber(Primary x) {
		String number = Integer.toString(x.getNumber().getValue());
		if (x.getNumber().getNegative() != null)
			return x.getNumber().getNegative() + number;
		return number;
	}

}
